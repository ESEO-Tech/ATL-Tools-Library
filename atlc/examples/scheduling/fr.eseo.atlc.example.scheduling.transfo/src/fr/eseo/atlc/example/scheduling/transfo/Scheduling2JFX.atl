-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

module courses2jfx;

create OUT: JFX from IN: Scheduling;

unique lazy rule Task {
	from 
		c: Scheduling!Task
	to
		g : JFX!Figure (
			nodes <- Sequence {r, t},
			constraints <-	Sequence {__constraintsCasso__},--, __constraintsChoco__},
			children <- c.requisites->collectTo('Requisite').g->concat(
					c.corequisites->collectTo('Corequisite').g
				)
		),
		r : JFX!Rectangle (
			movable <- true,
			id <- c.code + '.r',
			fill <- if c.terms->size() > 1 then '0xb16286ff' 
					else 
						if c.terms->select(e | e = 'fall')->notEmpty() then '0xfb4934ff' -- TODO: cannot use includes as it is not properly compiled yet
						else 
							if c.terms->select(e | e = 'winter')->notEmpty() then '0x689d6aff'
							else '0xffffffff'
							endif
						endif
					endif
--			fill <- if c.terms->size() > 1 then '0xbc00ffff' 
--					else 
--						if c.terms->includes('fall') then '0xb21224ff'
--						else 
--							if c.terms->includes('winter') then '0x047ab2ff'
--							else '0xffffffff'
--							endif
--						endif
--					endif
		),
		t : JFX!Text (
			id <- c.code + '.t',
			text <- c.code,
			textOrigin <- #TOP,
			fill <- '0x424242ff',
			mouseTransparent <- true
		),
		__constraintsCasso__: Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <- Sequence {
				r.x >= 0
				,r.y.".>="(c.period->collectTo('Period').l.startY)
				,r.width = 1.2 * t.width.toConstant()
				,r.height = 1.2 * t.height.toConstant()
				,r.x.stay('MEDIUM')
				,r.y.stay('MEDIUM')
				,t.x = r.x + 5
				,t.y = r.y + 2
				,r.x.">="(c.period->collectTo('Period').r.x) -- strong
				,(r.x + r.width).".<="(c.period->collectTo('Period').r.x + c.period->collectTo('Period').r.width) --strong
				,(r.y + r.height).".<="(c.period->collectTo('Period').r.y + c.period->collectTo('Period').r.height)
			}
--		),
--		__constraintsChoco__: Constraints!ExpressionGroup (
--			solver <- 'choco',
--			expressions <- Sequence {
--				c.period.stay('WEAK'),
--				c.period.number < 5,
--				c.period.number >= 0,
--				c.period.number.".>"(c.requisites.target.period.number),
--				c.period.number.".="(c.corequisites.target1.period.number) --TODO : name conflict with target
--			}
		)
}

unique lazy rule Period {
	from
		s: Scheduling!Period
	to
		g: JFX!Figure (
			nodes <- Sequence {r, t, l},
			constraints <- Sequence {__constraintsCasso__, __constraintsChoco__}
		),
		r: JFX!Rectangle (
			id <- 's' + s.number->collect(n | n + 1) + '.r',
			fill <- '0x00000000',
			stroke <- '0x424242ff',
			mouseTransparent <- true
		),
		t: JFX!Text (
			id <- 's' + s.number->collect(n | n + 1) + '.t',
			--TODO : id <- 's' + (s.number + 1) + '.t',
			text <- 'Period ' + s.number->collect(n | n + 1) + ' (' + s.load + ')',
			textOrigin <- #TOP,
			fill <- if s.load < 5 or s.load > 7 -- TODO: s.totalCredits > 16 and totalCredits should be computed from s.courses->sum() directly
						then '0xff0000ff' --TODO : use a parameter model to set constants
						else '0x424242ff'
						endif,
			mouseTransparent <- true
		),
		l : JFX!Line (
			id <- 's' + s.number->collect(n | n + 1) + '.l',
			stroke <- '0x424242ff'
--			,stroke <- r.stroke --TODO : would be usefull to prevent having multiple static values
		),
		__constraintsCasso__: Constraints!ExpressionGroup(
			solver <- 'cassowary',
			expressions <- Sequence {
				r.y = 0,
				r.x = s.number.toConstant() * r.width,
				l.startX = r.x,
				l.endX = r.x + r.width,
				l.startY = t.y + t.height.toConstant() + 5,
				l.endY = l.startY,
				r.width = 125,
				r.height = 200,
				t.x = r.x + (r.width / 2) - (t.width.toConstant() / 2),
				t.y = r.y + 5
			}
		),
		__constraintsChoco__: Constraints!ExpressionGroup (
			solver <- 'choco',
			expressions <- Sequence {
--				(s.institute.courses.semesterNumber.".="(s.number.toConstant())).reify().scalar(
--					s.institute.courses.credits.toConstant(),
--					'>',
--					10
--				),
--				(s.institute.courses.semesterNumber.".="(s.number.toConstant())).reify().scalar(
--					s.institute.courses.credits.toConstant(),
--					'<=',
--					19
--				)

--				s.institute.courses.semesterNumber->collect(e |
--					e = s.number.toConstant()
--				).scalar(
--					s.institute.courses.credits.toConstant()
--				) <= 19

				-- scalar pattern 0
--				source->collect(e |
--					e compOp exp
--				) => source.".compOp"(exp).reify()

				-- scalar pattern 1
--				source->collect(e |
--					if cstr(e) then
--						exp(e)
--					else
--						0
--					endif
--				)->sum() => source.collect(e | cstr(e)).reify().scalar(source->collect(e | exp(e)))

				-- scalar pattern 2
--				source->select(e |
--					cstr(e)
--				)->collect(e |
--					exp(e)
--				)->sum() => source.collect(e | cstr(e)).reify().scalar(source->collect(e | exp(e)))

				-- OCL pattern 1
--				source->collect(e |
--					if cond(e) then
--						exp(e)
--					else
--						0	-- of type
--					endif
--				)->sum() = source->select(e |
--					cond(e)
--				)->collect(e |
--					exp(e)
--				)->sum()

-- Moved to SchedulingConstraints
--				(
--						s.project.tasks.cost.toConstant()
--					*
--						(
--							s.project.tasks.period.".="(s.toConstant())
--						).reify()
--				).sum() >= s.project.minLoad.toConstant(),
--				(s.project.tasks.cost.toConstant() *
--					(
--						s.project.tasks.period.".="(s.toConstant())
--					).reify()
--				).sum() <= s.project.maxLoad.toConstant()
			}
		)
}

unique lazy rule Requisite {
	from
		r : Scheduling!Requisite
	to
		g : JFX!Figure (
			nodes <- Sequence {l},
			constraints <- Sequence {__constraints__}
		),
		l : JFX!Arrow (
			id <- 'rq_' + r.source.code + '_' + r.target.code + '.l',
			stroke <- '0x424242ff',
			phi <- 20,
			barb <- 10,
			hideable <- true
		),
		__constraints__ : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <- Sequence { --TODO: use let to reuse sub-expressions
				l.fromX = 0 -- weak
				,l.fromY = 0 -- weak
				,l.fromX - l.toX = 0 -- weak 10
				,l.fromY - l.toY = 0 -- weak 10
				,l.fromX.".>="(r.source->collectTo('Task').r.x)
				,l.fromX.".<="(r.source->collectTo('Task').r.x + r.source->collectTo('Task').r.width)
				,l.fromY.".>="(r.source->collectTo('Task').r.y)
				,l.fromY.".<="(r.source->collectTo('Task').r.y + r.source->collectTo('Task').r.height)
				,l.toX.".>="(r.target->collectTo('Task').r.x)
				,l.toX.".<="(r.target->collectTo('Task').r.x + r.target->collectTo('Task').r.width)
				,l.toY.".>="(r.target->collectTo('Task').r.y)
				,l.toY.".<="(r.target->collectTo('Task').r.y + r.target->collectTo('Task').r.height)
--				,r.target->collectTo('Course').r.x.".+"(r.target->collectTo('Course').r.width) <= r.source.semester->collectTo('Semester').r.x
			}
		)
}

unique lazy rule Corequisite {
	from
		r : Scheduling!Corequisite
	to
		g : JFX!Figure (
			nodes <- Sequence {l},
			constraints <- Sequence {__constraints__}
		),
		l : JFX!Arrow (
			id <- 'co_' + r.source.code + '_' + r.target.code + '.l',
			stroke <- '0x00ff00ff',
			phi <- 20,
			barb <- 10,
			hideable <- true
		),
		__constraints__ : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <- Sequence {
				l.fromX = 0 -- weak
				,l.fromY = 0 -- weak
				,l.fromX - l.toX = 0 -- weak 10
				,l.fromY - l.toY = 0 -- weak 10
				,l.fromX.".>="(r.source->collectTo('Task').r.x)
				,l.fromX.".<="(r.source->collectTo('Task').r.x + r.source->collectTo('Task').r.width)
				,l.fromY.".>="(r.source->collectTo('Task').r.y)
				,l.fromY.".<="(r.source->collectTo('Task').r.y + r.source->collectTo('Task').r.height)
				,l.toX.".>="(r.target->collectTo('Task').r.x)
				,l.toX.".<="(r.target->collectTo('Task').r.x + r.target->collectTo('Task').r.width)
				,l.toY.".>="(r.target->collectTo('Task').r.y)
				,l.toY.".<="(r.target->collectTo('Task').r.y + r.target->collectTo('Task').r.height)
--				,r.target->collectTo('Course').r.x.".+"(r.target->collectTo('Course').r.width) <= r.source.semester->collectTo('Semester').r.x.".+"(r.source.semester->collectTo('Semester').r.width)
			}
		)
}

--unique lazy rule Requisite {
--	from 
--		t : TupleType(source: scheduling!Course, target: scheduling!Course)
--	to
--		g : JFX!Figure (
--			nodes <- Sequence {l},
--			expressions <- Sequence {__constraints__}
--		),
--		l : JFX!Line (
--			strokeWidth <- 2.0,
--			stroke <- '0xff0000ff'
--		),
--		__constraints__: Constraints!ExpressionGroup (
--			solver <- 'cassowary',
--			expressions <- Sequence {
--				l.startX = t.source->collectTo('Course').x
--				,l.startY = t.source->collectTo('Course').y
--				,l.endX = t.target->collectTo('Course').x
--				,l.endY = t.target->collectTo('Course').y
--			}
--		)
--}
--lazy rule Student {
--	from 
--		s: scheduling!Student
--	to
--		c : scheduling!scheduling (
--			semesters <- Sequence {}
--		),
--		cs: Constraints!ExpressionGroup (
--			solver <- 'choco',
--			expressions <- Sequence {
----				c.semesters.totalCredits.sum() >= 12, -- TODO: this is not possible yet but there should be a way to write such constraint
----				c.semesters.totalCredits.sum() <= 18
--			}
--		)
--}

-- Idea : 
--	- from:
--		- a set of courses with prerequisites, corequisites and restrictions
--		- a student that have validated courses, courses he/she want to validate (TODO: add a goal diploma that state which courses are required ?)
--	- generate:
--		- a possible scheduling (affect courses to semesters)
--			- need to:
--				- have enought credits per term
--				- be available at said term (some courses are only available in specific terms)
--	- display:
--		- generate a view from the proposed scheduling


