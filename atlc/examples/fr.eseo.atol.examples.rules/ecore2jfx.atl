-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
module ecore2jfx;

create OUT : JFX from IN : Ecore;

-- TODO create helper to layout classes : create integer sequence to increase x,y

-- this entrypoint is necessary for execution by classical ATL VM
-- but will not be used in code generation
entrypoint rule Main() {
	do {
		Ecore!EPackage.allInstancesFrom('IN')->select(e |
			e.eSuperPackage.oclIsUndefined()
		)->collect(e |
			thisModule.package2rectangle(e)
		);
--		Ecore!EClass.allInstancesFrom('IN')->collect(e | thisModule.class2rectangle(e));
	}
}

--unique lazy rule ModelElement {
--	from
--		s : Ecore!EModelElement
--	to
----		g : ATLC!Group
--}
										
unique lazy rule Package {--extends ModelElement {
	from 
		model : Ecore!EPackage
	to 
		g : JFX!Figure (
			nodes <- Sequence {r, t},
			constraints <-	Sequence {__constraintsCasso__, __constraintsChoco__},
			children <-	model.eClassifiers->select(
							Ecore!EClass
						)->collectTo('Class').g->concat(
							model.eSubpackages->collectTo('Package').g
						)
		),
		r : JFX!Rectangle (
			movable <- true,
			id <- model.name + '.r',
			stroke <- '0xff0000ff',	-- TODO: use accessor generators (notably used to add .asOne(false) to boolean propertys) to convert string to Paint
			strokeWidth <- 2.0,
			fill <- '0xffffffff'
--			,contains <- model.eSubpackages->collectTo('Package').r
		),
		-- TODO: use the following scheme to add constraints...
		-- This seems better than simply adding a __constraints__ binding like in the t element below because:
		-- - There is no special reason to put a __constraints__ binding in one target element rather than another one
		-- - Having a special target element for constraints reserves a place for it in the target "tuple".
		-- - Having a special metamodel (Constraints here) should make it much easier to interface the ATOL & constraints compilers.
		__constraintsCasso__ : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <- Sequence {
--				t.top.center = r.top.center,

				r.height >= 200
				,r.width >= 200
				,r.x.stay('MEDIUM', 100)
				,r.y.stay('MEDIUM', 100)
				,t.x = r.x
				,t.y = r.y
--				,r.x >= 100 -- weak ok
				-- regex only check for "--\s+(WEAK|...|REQUIRED)\s+(:real:)?" so rest of the line can be used for real comment
--				,r.y >= 157 -- STRONG 24.5
--				,r.contains(model.eClassifiers->collectTo('class2rectangle').r)
--				,r.contains(model.eSubpackages->collectTo('package2rectangle').r)
				,model.eClassifiers->collectTo('Class').r.x.".>="(r.x) -- here we should use a >= instead of a .>= but it needs to know that right expression does not contains any varaibleVector and left one does so whatever the operator cartesian semantic should be used
				,(model.eClassifiers->collectTo('Class').r.x."+"(model.eClassifiers->collectTo('Class').r.width)).".<="(r.x + r.width)
				,model.eClassifiers->collectTo('Class').r.y.".>="(r.y)
				,(model.eClassifiers->collectTo('Class').r.y."+"(model.eClassifiers->collectTo('Class').r.height)).".<="(r.y + r.height)
				,model.eClassifiers->collectTo('Class').r.x.sum() = r.width
			}
--			->union(model.eClassifiers->select(Ecore!EClass)->collectTo('class2rectangle').__constraints)
		),
		__constraintsChoco__ : Constraints!ExpressionGroup (
			solver <- 'choco',
			expressions <- Sequence {
				model.eClassifiers->collectTo('Class').r.strokeWidth.allDifferent(),
				model.eClassifiers->collectTo('Class').r.strokeWidth.product() < 1000
			}
		),
		t : JFX!Text (
			id <- model.name + '.t',
			text <- model.name,
			textOrigin <- #TOP,
			mouseTransparent <- true
		)
}

unique lazy rule Class {--extends ModelElement {
	from
		c : Ecore!EClass
	to
		g : JFX!Figure (
			nodes <- Sequence {r, t},
			constraints <-	Sequence {__constraintsCass__, __constraintsChoco__}
		),
		r : JFX!Rectangle (
			movable <- true,
			id <- c.name + '.r',
			stroke <- '0x8000ffff',
			fill <- '0xffffffff'
		),
		__constraintsCass__ : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <- Sequence {
				r.height >= 50
				,r.height = 0 -- weak
				,r.width >= 50
				,r.width = 0 -- weak
				,t.x = r.x
				,t.y = r.y
				,r.x.stay('WEAK', 100)
				,r.y.stay('WEAK', 100)
				,r.width >= 1.2 * t.width.toConstant()
				,r.height >= 1.2 * t.height.toConstant()
			}
		),
		__constraintsChoco__ : Constraints!ExpressionGroup (
			solver <- 'choco',
			expressions <- Sequence {
				r.strokeWidth > 0,
				r.arcWidth > 0,
				r.arcHeight > 0,
					r.strokeWidth >= 2
				or
					r.arcHeight <= 20
				,
				r.arcWidth = r.arcHeight.dist(r.strokeWidth)
			}
		),
		__constraintsMinicp__: Constraints!ExpressionGroup (
			solver <- 'minicp',
			expressions <- Sequence {
				r.strokeWidth >= 10,
				r.arcWidth >= 10,
				r.arcWidth <> 11,
				r.arcWidth < 14,
				r.strokeWidth = r.arcHeight
			}
		),
		t : JFX!Text (
			id <- c.name + '.t',
			text <- c.fullName(),
			textOrigin <- #TOP,
			mouseTransparent <- true
		)
}

helper context Ecore!EClass def: fullName() : String =
	self.ePackage.name + '::' + self.name;
