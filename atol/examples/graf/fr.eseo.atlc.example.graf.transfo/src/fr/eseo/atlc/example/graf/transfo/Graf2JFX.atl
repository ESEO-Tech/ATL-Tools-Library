-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

module graf2jfx;

create OUT: JFX, constraints : Constraints from IN: Graf;

unique lazy rule Graph {
	from
		gr: Graf!Graph
	to
		g : JFX!Figure (
			children <- gr.arcs->collectTo('Arc').g->concat(
					gr.nodes->collectTo('Node').g
				)
		)
}

unique lazy rule Node {
	from
		n : Graf!Node
	to
		g : JFX!Figure (
			nodes <- Sequence {c},
			constraints <- Sequence {__constraints__}
		),
		c : JFX!Circle (
			fill <- '0x0dbaffff',
			stroke <- '0x000000ff',
			radius <- 20.0,
			movable <- true
		),
		__constraints__: Constraints!ExpressionGroup (
			expressions <- Sequence {
				c.centerX.suggest(n.xinit.toConstant())
				,c.centerY.suggest(n.yinit.toConstant())
				,c.centerX.stay('WEAK')
				,c.centerY.stay('WEAK')
				,c.centerX >= 20
				,c.centerY >= 20
				,c.centerX <= 800
				,c.centerY <= 800
			}
		)
}

unique lazy rule Arc {
	from
		arc: Graf!Arc
	to
		g : JFX!Figure (
			nodes <- Sequence {a},
			constraints <- Sequence {__constraints__}
		),
		a : JFX!Line (
		),
		__constraints__: Constraints!ExpressionGroup (
			expressions <- Sequence {
				a.startX = arc.source->collectTo('Node').c.centerX
				,a.startY = arc.source->collectTo('Node').c.centerY
				,a.endX = arc.target->collectTo('Node').c.centerX
				,a.endY = arc.target->collectTo('Node').c.centerY
			}
		)
}
