-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

-- @atlcompiler atl2004
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
module Ecore2UML;
create OUT : UML from IN : Ecore;

-- TODO:
-- - isInterface: would require rule guards
-- - address TODOs listed in the code below
-- DONE:
-- - EStructuralFeature.defaultValue (no equivalent for EClassifier.defaultValue?)
-- - add associations
-- - generics: should not be an issue, just some more code
--		- https://wiki.eclipse.org/EMF/EMF_2.3/Generics
--		- not finished (see detailed TODO in transfo below), but already kind of works
-- - factor code: would require rule inheritance
-- - fix associations (e.g., by making pairId work)

helper context Ecore!EPackage def: duplicateFeatures : OclAny =
	let allFeatures : OclAny =
		self.eClassifiers->select(
			Ecore!EClass
		).eStructuralFeatures->select(
			Ecore!EStructuralFeature
		)
	in
	allFeatures->collect(e |
		e.name
	).debug(
		'allFeatures.name'
	)->asSet(
	).debug(
		'allFeatures.asSet'
	)->select(n |
		allFeatures->select(r | r.name = n)->size() > 1
	).debug(
		'duplicate features'
	)->collect(n |
		Tuple {
			name = n,
			references =	allFeatures->select(r |
								r.name = n
							)->collect(r |
								r.eContainingClass.name
							)
		}
	);
--					->select(e |
--						e.references->size() > 1	-- TODO: make it possible to read tuple parts
--					)

-- redefining an existing derived features because
-- - derived features are generally not incremental in EMF (i.e., they do not notify when they change)
-- - ATOL does not support them anyway (for the previous reason)
helper context Ecore!EClass def: eReferences : Collection(Ecore!EReference) =
	self.eStructuralFeatures->select(Ecore!EReference);

-- Explanation: using abstract Collection(something) as type means a IBox<something>
-- whereas using concrete {Bag,OrderedSet,Sequence,Set}(something) means an immutable collection
helper context Ecore!EReference def: pairId : Set(Ecore!EReference) =
	Set {self, self.eOpposite}.__immutable();	-- DONE: mutable creation of immutable SetExp
--	self.eOpposite->collect(e | Set {self, e}.__immutable());

unique lazy rule EPackage2Package {
	from
		s : Ecore!EPackage
	to
		t : UML!Package (
			name <- s.name,
			URI <- s.nsURI,
			packagedElement <-
--				let test : OclAny = s.duplicateFeatures.debug('groupedFeatures') in
				let refs : OclAny = s.eClassifiers->select(
						Ecore!EClass
					).eReferences
				in
				let assEnds : OclAny = refs->reject(e |
						e.eOpposite.oclIsUndefined() -- TODO: cross-package associations
					)->reject(e |
						-- so that the first name of association will be containment
						e.eOpposite.containment
					)
				in
				let ass : OclAny =
					assEnds.debug('non-containment')->collect(e |
						e.pairId
					)->asSet()->collect(p |
						assEnds->select(e |
							e.pairId = p
						)->first()
					)
					->collect(e |
						thisModule.EReferencePair2Association(
							e,
							e.eOpposite
						).t
					).debug('association members')
				in
				s.eSubpackages->collectTo(
					'EPackage2Package'
--				)->select(	-- only when patterns are compiled to tuples + requires IBox.select to be modified to allow to select to arbitrary classes
--					UML!PackageableElement
				).t.oclAsType(
					-- only when patterns are compiled to tuples (better than above because no need to modify IBox)
					UML!PackageableElement
				)->concat(
					-- WARNING: rule order in collectTo is significant (notably because EEnum extends EDataType)
					s.eClassifiers->collectTo(
						'EClassifier2Classifier'
					).t
				)->concat(
					ass
						-- TODO: make this unnecessary (probably requires static type analysis)
						.oclAsType(UML!PackageableElement)
				)->concat(
					thisModule.EReference2Association(
						refs->select(e |
							e.eOpposite.oclIsUndefined()
						)
					).t
				)
		)
}

unique lazy rule EReferencePair2Association {
	from
--		s : Set(Ecore!EReference)
		s1 : Ecore!EReference,
		s2 : Ecore!EReference
	to
		t : UML!Association (
--			name <- s1.eContainingClass.name + '_' + s1.name + '_' +
--					s2.eContainingClass.name + '_' + s2.name,
			name <- 'A_' + s1.name + '_' + s2.name,
			visibility <- #private,
--			ownedEnd <- Sequence {s1, s2}->collectTo('EReference2Property').t,
			memberEnd <- Sequence {s1, s2}->collectTo('EReference2Property').t
		)
}

unique lazy rule EReference2Association {
	from
		s : Ecore!EReference
	using {
		oname : String = s.eContainingClass.name.firstToLower;
	}
	to
		t : UML!Association (
			name <- 'A_' + s.name + '_' + oname,
			visibility <- #private,
			memberEnd <- Sequence {thisModule.EReference2Property(s).t, o},
			-- WARNING: ownedEnd must be initialized after memberEnd
			-- this is an example of Eclipse UML adding ordering constraints that Ecore metamodels
			-- should not have (another example: stereotype application must be done after
			-- profile application)
			ownedEnd <- Sequence {o}
		),
			o : UML!Property (
				-- TODO: lower & upper
				name <- oname,
				type <- thisModule.EClass2Class(s.eContainingClass).t
			)
}

unique lazy abstract rule EClassifier2Classifier {
	from
		s : Ecore!EClassifier
	to
		t : UML!Classifier (
			name <- s.name,
			-- DONE: rewrite as an if?
			ownedTemplateSignature <-
--										s.eTypeParameters->first()->collect(e |
--											s
--										)->collectTo(
--											'EClassifier2TemplateSignature'
--										).t
										if s.eTypeParameters->isEmpty() then
											OclUndefined
										else
											thisModule.EClassifier2TemplateSignature(s).t
										endif
		)
}

helper context Ecore!EClass def: nestedGenericTypes : Collection(Ecore!EGenericType) =
	self.eGenericSuperTypes->concat(
		self.eStructuralFeatures.eGenericType
	)->concat(
		self.eOperations.eParameters.eGenericType
	)->concat(
		self.eOperations.eGenericType->reject(e |
			-- excluding "void" return types
			e.oclIsUndefined()
		)
	)->select(e |
		e.eTypeArguments->notEmpty()
	)->closure(e |
		e.eTypeArguments->select(a |
			a.eTypeArguments->notEmpty()
		)
	);

helper context Ecore!EClass def: canonicGenericTypes : Collection(OclAny) =
	self.nestedGenericTypes.actualName->asSet()->collect(e |
		Tuple {
			actualName = e,
			eGenericTypes = self.nestedGenericTypes->select(n | n.actualName = e)->size()
		}
	);

helper context Ecore!EGenericType def: isWildcard : Boolean =
	self.eClassifier.oclIsUndefined() and self.eTypeParameter.oclIsUndefined();

unique lazy rule EClass2Class extends EClassifier2Classifier {
	from
		s : Ecore!EClass
	to
		t : UML!Class (
			isAbstract <- s.abstract,
			generalization <-	thisModule.EClass2Generalization(
									s.eGenericSuperTypes, s
								).t,
			ownedAttribute <-	s.eStructuralFeatures->collectTo(
									'EStructuralFeature2Property'
								).t,
			ownedOperation <-	s.eOperations->collectTo(
									'EOperation2Operation'
								).t,
			nestedClassifier <- let cano : OclAny = s.canonicGenericTypes.debug('canonic') in
								s.nestedGenericTypes->collectTo(
									'EGenericType2BoundClassifier'
								).t->concat(
									s.nestedGenericTypes.eTypeArguments->select(e |
										e.isWildcard
									).debug('wildcards for ' + s.name)->collectTo('EGenericType2Wildcard').t
								).oclAsType(UML!Classifier)
		)
}

unique lazy rule EClassifier2TemplateSignature {
	from
		s : Ecore!EClassifier
	to
		t : UML!RedefinableTemplateSignature (
			parameter <-	s.eTypeParameters->collectTo(
								'ETypeParameter2ClassifierTemplateParameter'
							).t,
			ownedParameter <-	s.eTypeParameters->collectTo(
									'ETypeParameter2ClassifierTemplateParameter'
								).t
		)
}

unique lazy rule ETypeParameter2ClassifierTemplateParameter {
	from
		s : Ecore!ETypeParameter
	to
		t : UML!ClassifierTemplateParameter (
			parameteredElement <- ope,
			ownedParameteredElement <- ope,
			constrainingClassifier <- s.eBounds.actual.oclAsType(UML!Classifier)
		),
			-- TODO: appropriate kind of classifier
			ope : UML!Class (
				name <- s.name
			)
}

unique lazy rule EClass2Generalization {
	from
		general : Ecore!EGenericType,
		specific : Ecore!EClass
	to
		t : UML!Generalization (
			general <-	general.actual.oclAsType(UML!Classifier)
		)
}

unique lazy abstract rule EDataType2DataType extends EClassifier2Classifier {
	from
		s : Ecore!EDataType
	to
		t : UML!DataType
}

unique lazy rule EEnum2Enumeration extends EDataType2DataType {
	from
		s : Ecore!EEnum
	to
		t : UML!Enumeration (
			ownedLiteral <- s.eLiterals->collectTo(
								'EEnumLiteral2EnumerationLiteral'
							).t
		)
}

unique lazy rule EDataType2PrimitiveType extends EDataType2DataType {
	from
		s : Ecore!EDataType
	to
		t : UML!PrimitiveType
}

unique lazy rule EEnumLiteral2EnumerationLiteral {
	from
		s : Ecore!EEnumLiteral
	to
		t : UML!EnumerationLiteral (
			name <- s.name
		)
}

unique lazy abstract rule ETypedElement2MultiplicityElement {
	from
		s : Ecore!ETypedElement
	to
		t : UML!MultiplicityElement (
			lowerValue <-	if s.lowerBound = 1 then
								OclUndefined
							else
								thisModule.ETypedElement_lowerBound(s).t
							endif,
			upperValue <-	if s.upperBound = 1 then
								OclUndefined
							else
								thisModule.ETypedElement_upperBound(s).t
							endif,
			isOrdered <- s.ordered,
			isUnique <- s.unique
		)
			-- DONE: only generate the following elements if their value is different from 1
--			lb : UML!LiteralInteger (
--				value <- s.lowerBound
--			),
--			ub : UML!LiteralUnlimitedNatural (
--				value <- s.upperBound
--			)
}

unique lazy rule ETypedElement_lowerBound {
	from
		s : Ecore!ETypedElement
	to
		t : UML!LiteralInteger (
			value <- s.lowerBound
		)
}

unique lazy rule ETypedElement_upperBound {
	from
		s : Ecore!ETypedElement
	to
		t : UML!LiteralUnlimitedNatural (
			value <- s.upperBound
		)
}

unique lazy abstract rule EStructuralFeature2Property extends ETypedElement2MultiplicityElement {
	from
		s : Ecore!EStructuralFeature
	to
		t : UML!Property (
			name <- s.name,
			visibility <- #public,
			isReadOnly <- not s.changeable,
			isDerived <- s.derived,
			type <- s.actualType
		)
}

helper context Ecore!ETypedElement def: actualType : UML!Type =
	self.eGenericType.actual;

helper context Ecore!EGenericType def: actual : UML!Type =
	let test : OclAny = self.eClassifier in
	if self.eTypeArguments->isEmpty() then
		if self.eTypeParameter.oclIsUndefined() then
			thisModule.EClassifier2Classifier(self.eClassifier).t
		else
			thisModule.ETypeParameter2ClassifierTemplateParameter(self.eTypeParameter).ope
		endif
--		self.eClassifier->collectTo(
--			'EClassifier2Classifier'
--		).t
--			With regular ATL (i.e., without collectTo), one would have to write something like:
--			type <- s.eType->collect(e |
--						if e.oclIsKindOf(Ecore!EClass) then
--							thisModule.EClass2Class(e)
--						else if e.oclIsKindOf(Ecore!EEnum) then
--							thisModule.EEnum2Enumeration(e)
--						else
--							thisModule.EDataType2DataType
--						endif endif
--					)
-- OR use rule inheritance instead:
--			type <- s.eType->collect(e | thisModule.EClassifier2Classifier(e))
	else
		-- TODO: collapse equal generic types (e.g., build an id, and use asSet)
		thisModule.EGenericType2BoundClassifier(self).t
		-- TODO: should the following work, by auto-wrapping self?
--		self->collectTo(
--			'EGenericType2BoundClassifier'
--		).t
	endif;

unique lazy rule EAttribute2Property extends EStructuralFeature2Property {
	from
		s : Ecore!EAttribute
	to
		t : UML!Property (
			defaultValue <- if s.defaultValueLiteral.oclIsUndefined() then
								OclUndefined
							else
								thisModule.EAttribute2DefaultValue(s).t
							endif
		)
}

unique lazy rule EAttribute2DefaultValue {
	from
		s : Ecore!EAttribute
	to
		t : UML!OpaqueExpression (
			-- Remark: actual UML.metamodel.uml uses specific classes like LiteralBoolean, LiteralInteger...
			name <- 'literal',
			body <- s.defaultValueLiteral--.debug(s.name + '.defaultValueLiteral')
		)
}

unique lazy rule EReference2Property extends EStructuralFeature2Property {
	from
		s : Ecore!EReference
	to
		t : UML!Property (
			aggregation <- if s.containment then #composite else #none endif
		)
}

unique lazy rule EOperation2Operation {
	from
		s : Ecore!EOperation
	to
		t : UML!Operation (
			name <- s.name,
			raisedException <- s.eExceptions->collectTo('EClassifier2Classifier').t,
			ownedParameter <-	s.eType->reject(e |
									e.oclIsUndefined()
								)->collect(e |
									thisModule.EOperation2RetParameter(s).t
								)->concat(
									s.eParameters->collectTo(
										'EParameter2Parameter'
									).t
								),
			ownedTemplateSignature <-
										if s.eTypeParameters->isEmpty() then
											OclUndefined
										else
											thisModule.EOperation2TemplateSignature(s).t
										endif
		)
}

unique lazy rule EOperation2TemplateSignature {
	from
		s : Ecore!EOperation
	to
		t : UML!TemplateSignature (
			parameter <-	s.eTypeParameters->collectTo(
								'ETypeParameter2ClassifierTemplateParameter'
							).t,
			ownedParameter <-	s.eTypeParameters->collectTo(
									'ETypeParameter2ClassifierTemplateParameter'
								).t
		)
}

unique lazy rule EOperation2RetParameter extends ETypedElement2MultiplicityElement {
	from
		s : Ecore!EOperation
	to
		t : UML!Parameter(
--			name <- 'ret',
			direction <- #return,
			type <- s.actualType
		)
}

helper context Ecore!EGenericType def: actualName : String =
	let n : String =
		if self.eClassifier.oclIsUndefined() then
			 if self.eTypeParameter.oclIsUndefined() then
				'Wildcard'
			 else
				self.eTypeParameter.name
			 endif
		else
			self.eClassifier.name
		endif
	in 
	if self.eTypeArguments->notEmpty() then
		let f : OclAny = self.eTypeArguments->first() in
		n + '_' + f.actualName +
--		self.eTypeArguments->select(e |
--			e <> f
--		)->collect(e |
--			'-' + e.actualName
--		)->first(
--		)->concat(Sequence {''})	-- to make sure there is at least an empty string
		-- TODO: support more than 2 type arguments
		if self.eTypeArguments->size() > 1 then
			'-' + self.eTypeArguments->select(e |
				e <> f
			)->first().actualName
		else
			''
		endif
	else
		n
	endif;

-- DONE: put template bindings in nested classifiers (see Ecore.metamodel.uml)
-- DONE: compare what we generate from Ecore to Ecore.metamodel.uml
-- TODO: EGenericType.eLowerBound & EGenericType.eUpperBound: when EGenericType
-- is used as typeArgument & is a wildcard (i.e., eClassifier and eTypeParameter == null)
unique lazy rule EGenericType2BoundClassifier {
	from
		s : Ecore!EGenericType
	to
		-- TODO: generate the proper kind of Classifier, not always a Class
		t : UML!Class (
			name <- s.actualName,
			templateBinding <- Sequence {b}
		),
			b : UML!TemplateBinding (
				signature <- thisModule.EClassifier2TemplateSignature(s.eClassifier).t,
				parameterSubstitution <-
					Tuple {
						left = s.eClassifier.eTypeParameters,
						right = s.eTypeArguments
					}->zipWith(l, r |	-- remark: ATL does not know zipWith: the error can be ignored
						thisModule.EGenericType2ParameterSubstitution(l, r)
					).t
			)
}

unique lazy rule EGenericType2ParameterSubstitution {
	from
		formal : Ecore!ETypeParameter,
		actual : Ecore!EGenericType
	to
		t : UML!TemplateParameterSubstitution (
			formal <-	thisModule.ETypeParameter2ClassifierTemplateParameter(formal).t,
			actual <-	if actual.isWildcard then
							thisModule.EGenericType2Wildcard(actual).t
						else
							actual.actual
							.oclAsType(UML!ParameterableElement)	-- TODO: should not need upcasting
						endif
		)
}

unique lazy rule EGenericType2Wildcard {
	from
		s : Ecore!EGenericType
	to
		t : UML!Class (	-- TODO: correct type
			name <- 'Wildcard'
		)
}

unique lazy rule EParameter2Parameter extends ETypedElement2MultiplicityElement {
	from
		s : Ecore!EParameter
	to
		t : UML!Parameter (
			name <- s.name,
			type <- s.actualType
		)
}
