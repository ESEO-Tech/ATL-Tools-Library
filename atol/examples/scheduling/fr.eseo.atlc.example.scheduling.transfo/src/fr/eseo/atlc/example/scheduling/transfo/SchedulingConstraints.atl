-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

-- some constraints are CSP-like constraints, others are only OCL-like (e.g., derived
		-- properties)

module SchedulingConstraints;
create OUT: Scheduling, C: Constraints refining IN: Scheduling;

rule Task {
	from
		c: Scheduling!Task
	to
		t: Scheduling!Task,
		__constraintsChoco__: Constraints!ExpressionGroup (
			solver <- 'choco',
			expressions <- Sequence{c.period.stay('WEAK'),
						c.period.number < 5,
						c.period.number >= 0,
						c.period.number > c.requisites.target.period.number,
						c.period.number = c.corequisites.target1.period.number --TODO
								-- : name conflict with target
					}
		)
}

rule Period {
	from
		s: Scheduling!Period
	to
		t: Scheduling!Period (
			-- specify how the totalCost derived property is (incrementally) computed
			-- TODO: infer sumFloats instead of sum?
			load <- s.tasks.cost -> sumFloats()
		),
		__constraintsChoco__: Constraints!ExpressionGroup (
			solver <- 'choco',
			expressions <- Sequence{
				(
					s.project.tasks.cost.toConstant().".*"(
						(s.project.tasks.period = s.toConstant()).reify()
					)
				).sum().".>="(s.project.minLoad.toConstant()),
				(
					s.project.tasks.cost.toConstant().".*"(
						(s.project.tasks.period = s.toConstant()).reify()
					)
				).sum().".<="(s.project.maxLoad.toConstant())
			}
		)
}
