-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

-- @nsURI UML=http://www.eclipse.org/uml2/4.0.0/UML
-- @path Constraints=/fr.eseo.atlc.constraints/model/constraints.xcore
module UMLClass2JFX;
create OUT : JFX, constraints : Constraints from IN : UML;

uses CommonDiagramHelpers;

unique lazy rule Model {
	from
		s : UML!Model
	to
		t : JFX!Figure (
			nodes <- Sequence {},
			constraints <- Sequence {},
			children <-	s.packagedElement->select(UML!Classifier)->collect(e |
							thisModule.Classifier(e).t
						)
		)
}

--helper context UML!Text def: centerX : Real =
--	self.x + self.width.toConstant() / 2;

unique lazy abstract rule Classifier {
	from
		s : UML!Classifier
	to
		t : JFX!Figure
}

unique lazy rule Association extends Classifier {
	from
		s : UML!Association
	to
		t : JFX!Figure (
			nodes <- Sequence {l, txt, l2},
			constraints <- Sequence {constraints},
			children <-
				(
					thisModule.AssociationEnd(s.memberEnd->first(), 1.0)
				)->concat(
					thisModule.AssociationEnd(s.memberEnd->any(e | e <> s.memberEnd->first()), 0.0)
				).t
		),
		l : JFX!Line (
			stroke <- thisModule.opaqueBlack
		),
		l2 : JFX!Line (
			stroke <- thisModule.opaqueGray
		),
		txt : JFX!Text (
			text <- s.name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		temp : JFX!Rectangle,
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				-- TODO: why cannot we add .r at the end of the initExpressions of the following let expressions?
				let start : OclAny = thisModule.Class(
					s.memberEnd->first().type.oclAsType(UML!Class)
				) in
				let end : OclAny = thisModule.Class(
					s.memberEnd->any(e | e <> s.memberEnd->first()).type.oclAsType(UML!Class)
				) in
				let centerX : Real = l.startX + (l.endX - l.startX) / 2 in
				let centerY : Real = l.startY + (l.endY - l.startY) / 2 in
				Sequence {
					l.endX - l.startX = 0 -- weak 25
					,l.endY - l.startY = 0 -- weak 25

--					startR.contains(t.start),
					,l.startX >= start.r.x,
					l.startX <= start.r.x + start.r.width,
					l.startY >= start.r.y,
					l.startY <= start.r.y + start.r.height,

--					endR.contains(t.end)
					l.endX >= end.r.x,
					l.endX <= end.r.x + end.r.width,
					l.endY >= end.r.y,
					l.endY <= end.r.y + end.r.height

					,(txt.x - centerX).stay('WEAK')
--					,txt.x - centerX = temp.x
--					,temp.x.stay('WEAK')
					,(txt.y - centerY).stay('WEAK')
--					,txt.y - centerY = temp.y
--					,temp.y.stay('WEAK')

					,l2.startX = centerX, l2.startY = centerY
					,l2.endX - l2.startX = 0 -- weak
					,l2.endY - l2.startY = 0 -- weak
--					,l2.endX = txt.x, l2.endY = txt.y
--					txt.contains(l2.end)
					,l2.endX >= txt.x,
					l2.endX <= txt.x + txt.width.toConstant(),
					l2.endY >= txt.y,
					l2.endY <= txt.y + txt.height.toConstant()
				}
		)
}

unique lazy rule AssociationEnd {
	from
		s : UML!Property,
		start : Real
	to
		t : JFX!Figure (
			nodes <- Sequence {txt, l2},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		txt : JFX!Text (
			text <- s.name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		l2 : JFX!Line (
			stroke <- thisModule.opaqueGray
		),
		temp : JFX!Rectangle,
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				let asso : OclAny = thisModule.Association(s.owningAssociation) in
				Sequence {
					(l2.endX - l2.startX).stay('WEAK', 15)
--					l2.endX - l2.startX = temp.x
--					,temp.x.stay('WEAK', 15)
					,(l2.endY - l2.startY).stay('WEAK', 15)
--					,l2.endY - l2.startY = temp.y
--					,temp.y.stay('WEAK', 15)

					,txt.x.stay('WEAK', 10)
					,txt.y.stay('WEAK', 10)

					,l2.startX = start * asso.l.startX + (1 - start) * asso.l.endX
					,l2.startY = start * asso.l.startY + (1 - start) * asso.l.endY
					,l2.endX - l2.startX = 0 -- weak
					,l2.endY - l2.startY = 0 -- weak
--					,l2.endX = txt.x, l2.endY = txt.y
--					txt.contains(l2.end)
					,l2.endX >= txt.x,
					l2.endX <= txt.x + txt.width.toConstant(),
					l2.endY >= txt.y,
					l2.endY <= txt.y + txt.height.toConstant()
				}
		)
}

-- Simple Line variant
unique lazy rule GeneralizationSimpleLine {
	from
		s : UML!Generalization
	to
		t : JFX!Figure (
			nodes <- Sequence {l, p},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		l : JFX!Line (
			stroke <- thisModule.opaqueBlack
		),
		p : JFX!Polygon (
			stroke <- thisModule.opaqueBlack,
			fill <- thisModule.opaqueWhite,
			points <-
				let theta : Real = (l.endY - l.startY).atan2(l.endX - l.startX) in
				let barb : Real = 20 in
				let thirtyDeg : Real = 0.523599 in
				let phi : Real = thirtyDeg in
				(
					l.endX.oclAsType(Real)
				).concat(
					l.endY.oclAsType(Real)
				).concat(
					l.endX - barb * (theta + phi).cos()
				).concat(
					l.endY - barb * (theta + phi).sin()
				).concat(
					l.endX - barb * (theta - phi).cos()
				).concat(
					l.endY - barb * (theta - phi).sin()
				),
			movable <- true	-- only so that it can be clicked for interactor selection
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				-- TODO: why cannot we add .r at the end of the initExpressions of the following let expressions?
				let start : OclAny = thisModule.Class(
					s.specific.oclAsType(UML!Class)
				) in
				let end : OclAny = thisModule.Class(
					s.general.oclAsType(UML!Class)
				) in
				Sequence {
					l.endX - l.startX = 0 -- weak
					,l.endY - l.startY = 0 -- weak

--					startR.contains(t.start),
					,l.startX >= start.r.x,
					l.startX <= start.r.x + start.r.width,
					l.startY >= start.r.y,
					l.startY <= start.r.y + start.r.height,

--					endR.contains(t.end)
					l.endX >= end.r.x,
					l.endX <= end.r.x + end.r.width,
					l.endY >= end.r.y,
					l.endY <= end.r.y + end.r.height
				}
		)
}

-- Polyline variant
--unique lazy rule GeneralizationPolyline {
unique lazy rule Generalization {
	from
		s : UML!Generalization
	to
		t : JFX!Figure (
			nodes <- Sequence {l, p},
			constraints <- Sequence {constraints},
			children <- s.waypoints->collect(e | thisModule.Circle(e).t)
		),
		start : JFX!Circle,
		end : JFX!Circle,
		l : JFX!Polyline (
			stroke <- thisModule.opaqueBlack,
			points <-
				start.centerX->concat(start.centerY)->concat(
					s.waypoints->collect(e | e.centerX->concat(e.centerY))
				)->concat(
					end.centerX->concat(end.centerY)
				)
		),
		p : JFX!Polygon (
			stroke <- thisModule.opaqueBlack,
			fill <- thisModule.opaqueWhite,
			points <-
				let snd : JFX!Circle = s.waypoints->concat(end)->first() in
				let theta : Real = (start.centerY - snd.centerY).atan2(start.centerX - snd.centerX) in
				let barb : Real = 20 in
				let thirtyDeg : Real = 0.523599 in
				let phi : Real = thirtyDeg in
				(
					start.centerX.oclAsType(Real)
				).concat(
					start.centerY.oclAsType(Real)
				).concat(
					start.centerX - barb * (theta + phi).cos()
				).concat(
					start.centerY - barb * (theta + phi).sin()
				).concat(
					start.centerX - barb * (theta - phi).cos()
				).concat(
					start.centerY - barb * (theta - phi).sin()
				),
			movable <- true	-- only so that it can be clicked for interactor selection
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				-- TODO: why cannot we add .r at the end of the initExpressions of the following let expressions?
				let startC : OclAny = thisModule.Class(
					s.general.oclAsType(UML!Class)
				) in
				let endC : OclAny = thisModule.Class(
					s.specific.oclAsType(UML!Class)
				) in
				let startNext : OclAny = s.waypoints->concat(end)->first() in
				let endNext : OclAny = s.waypoints->reverse()->concat(start)->first() in
				Sequence {
					startNext.centerX - start.centerX = 0 -- weak
					,startNext.centerY - start.centerY = 0 -- weak
					,end.centerX - endNext.centerX = 0 -- weak
					,end.centerY - endNext.centerY = 0 -- weak

--					startR.contains(t.start),
					,start.centerX >= startC.r.x,
					start.centerX <= startC.r.x + startC.r.width,
					start.centerY >= startC.r.y,
					start.centerY <= startC.r.y + startC.r.height,

--					endR.contains(t.end)
					end.centerX >= endC.r.x,
					end.centerX <= endC.r.x + endC.r.width,
					end.centerY >= endC.r.y,
					end.centerY <= endC.r.y + endC.r.height
				}
		)
}

unique lazy rule Circle {
	from
		s : JFX!Circle
	to
		t : JFX!Figure (
			nodes <- Sequence {s},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				Sequence {
					s.centerX.stay('MEDIUM'), s.centerY.stay('MEDIUM')
					,s.radius = 2
				}
		)
}

unique lazy rule Rectangle {
	from
		s : JFX!Rectangle
	to
		t : JFX!Figure (
			nodes <- Sequence {s},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				Sequence {
					s.x.stay('MEDIUM'), s.y.stay('MEDIUM')
					,s.width = 5
					,s.height = 5
				}
		)
}

unique lazy rule Class extends Classifier {
	from
		s : UML!Class
	to
		t : JFX!Figure (
			nodes <- Sequence {r, txt, l},
			constraints <- Sequence {constraints},
			children <-
				s.ownedAttribute->collect(e |
					thisModule.Property(e).t
				)->concat(
					s.generalization->collect(e |
						thisModule.Generalization(e).t
					)
				)
		),
		r : JFX!Rectangle (
			movable <- true,
			fill <- thisModule.transparentWhite,
			stroke <- thisModule.opaqueBlack
		),
		txt : JFX!Text (
			text <- s.name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		l : JFX!Line (
			stroke <- thisModule.opaqueBlack
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				-- could also be a decision variable instead of being inlined
				let txtCenterX : Real = txt.x + txt.width.toConstant() / 2 in
				let rCenterX : Real = r.x + r.width / 2 in
				Sequence {
					r.x.stay('MEDIUM'), r.y.stay('MEDIUM'),
					txt.x.stay('MEDIUM'), txt.y.stay('MEDIUM'),

					r.width = 0 -- strong
					,r.height = 0 -- strong
					,r.x >= 0, r.y >= 0,

--					r.x = txt.x,
					rCenterX = txtCenterX,
					r.y = txt.y,

					r.width >= txt.width.toConstant() + thisModule.MARGIN * 2,
					r.height >= txt.height.toConstant(),

					l.startX = r.x, l.endX = r.x + r.width,
					l.startY = l.endY, l.startY = txt.y + txt.height.toConstant()

--					r.width >= s.ownedAttribute->collect(e | thisModule.Property(e).txt).width.toConstant() + thisModule.MARGIN * 2,
				}
		)
}

--helper context JFX!Rectangle def: center : TupleType(x : Real, y : Real) =
--	Tuple {
--		x = self.x + self.width / 2,
--		y = self.y + self.height / 2
--	};
--helper context JFX!Text def: center : TupleType(x : Real, y : Real) =
--	Tuple {
--		x = self.x + self.width.toConstant() / 2,
--		y = self.y + self.height.toConstant() / 2
--	};

--helper context JFX!Rectangle def: centerX : Real =
--	self.x + self.width / 2;

unique lazy rule Property {
	from
		s : UML!Property
	to
		t : JFX!Figure (
			nodes <- Sequence {txt},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		txt : JFX!Text (
			text <- s.name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				let class : OclAny = thisModule.Class(s.class) in
				let prev : OclAny = thisModule.Property(s.prev) in
				Sequence {
					txt.x.stay('WEAK'), txt.y.stay('WEAK'),
					txt.x = class.r.x + thisModule.MARGIN,

					txt.y >= class.l.startY,
					txt.y >= prev.txt.y + prev.txt.height.toConstant(),

					class.r.width >= txt.width.toConstant() + thisModule.MARGIN * 2,
					class.r.y + class.r.height >= txt.y + txt.height.toConstant()
				}
		)
}
