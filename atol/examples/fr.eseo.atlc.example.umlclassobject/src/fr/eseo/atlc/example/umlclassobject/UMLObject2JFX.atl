-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  version 1.0
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

-- @nsURI UML=http://www.eclipse.org/uml2/4.0.0/UML
-- @path Constraints=/fr.eseo.atlc.constraints/model/constraints.xcore
module UMLObject2JFX;
create OUT : JFX, constraints : Constraints from IN : UML;

uses CommonDiagramHelpers;

unique lazy rule Model {
	from
		s : UML!Model
	to
		t : JFX!Figure (
			nodes <- Sequence {},
			constraints <- Sequence {},
			children <-	s.packagedElement->select(UML!InstanceSpecification)->collect(e |
							thisModule.InstanceSpecification(e, e.classifier).t
						)
		)
}

unique lazy abstract rule InstanceSpecification {
	from
		s : UML!InstanceSpecification,
		c : UML!Classifier
	to
		t : JFX!Figure
}

unique lazy rule Link extends InstanceSpecification {
	from
		s : UML!InstanceSpecification,
		c : UML!Association
		-- TODO: implement guards... for the time being, we use a second source element to distinguish between link and object
--		(
--			s.classifier.oclIsKindOf(UML!Association)
--		)
	to
		t : JFX!Figure (
			nodes <- Sequence {l, txt},
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		l : JFX!Line (
			stroke <- thisModule.opaqueBlack
		),
		txt : JFX!Text (
			text <- s.classifier->first().name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		temp : JFX!Rectangle,
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				-- TODO: why cannot we add .r at the end of the initExpressions of the following let expressions?
				let st : UML!InstanceSpecification = s.slot->first().value.oclAsType(UML!InstanceValue).instance in
				let start : OclAny = thisModule.Object(
					st, st.classifier.oclAsType(UML!Class)
				) in
				let ed : UML!InstanceSpecification = s.slot->any(e | e <> s.slot->first()).value.oclAsType(UML!InstanceValue).instance in
				let end : OclAny = thisModule.Object(
					ed, ed.classifier.oclAsType(UML!Class)
				) in
				let centerX : Real = l.startX + (l.endX - l.startX) / 2 in
				let centerY : Real = l.startY + (l.endY - l.startY) / 2 in
				Sequence {
--					l.end.minimizeDistance(l.start, #weak),
--					(l.endX - l.startX).minimize(#weak),
					l.endX - l.startX = 0 -- weak
--					(l.endY - l.startY).minimize(#weak),
					,l.endY - l.startY = 0 -- weak

					,(txt.x - centerX).stay('WEAK')
--					,txt.x - centerX = temp.x
--					,temp.x.stay('WEAK')
					,(txt.y - centerY).stay('WEAK')
--					,txt.y - centerY = temp.y
--					,temp.y.stay('WEAK')

--					startR.contains(t.start),
					,l.startX >= start.r.x,
					l.startX <= start.r.x + start.r.width,
					l.startY >= start.r.y,
					l.startY <= start.r.y + start.r.height,

--					endR.contains(t.end)
					l.endX >= end.r.x,
					l.endX <= end.r.x + end.r.width,
					l.endY >= end.r.y,
					l.endY <= end.r.y + end.r.height
				}
		)
}

unique lazy rule Object extends InstanceSpecification {
	from
		s : UML!InstanceSpecification,
		c : UML!Class
	to
		t : JFX!Figure (
			nodes <- Sequence {r, txt1, txt2, txt3, l},
			constraints <- Sequence {constraints},
			children <- s.slot->collect(e | thisModule.Slot(e).t)
		),
		r : JFX!Rectangle (
			movable <- true,
			fill <- thisModule.transparentWhite,
			stroke <- thisModule.opaqueBlack
		),
--		txt : JFX!Text (
--			text <- s.name + ' : ' + s.classifier.name,
--			fill <- thisModule.transparentWhite,
--			stroke <- thisModule.opaqueBlack,
--			textOrigin <- #TOP,
--			editable <- true,
--			movable <- true
--		),
		txt1 : JFX!Text (
			text <- s.name,
			underline <- true,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		txt2 : JFX!Text (
			text <- ' : ',
			underline <- true,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			movable <- true
		),
		txt3 : JFX!Text (
			text <- s.classifier->first().name,	-- first necessary for bidir + will be done by <- anyway
			underline <- true,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		l : JFX!Line (
			stroke <- thisModule.opaqueBlack
		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				let txtX : Real = txt1.x in
				let txtWidth : Real = txt1.width.toConstant() + txt2.width.toConstant() + txt3.width.toConstant() in
				let txtY : Real = txt1.y in
				let txtHeight : Real = txt1.height.toConstant() in	-- TODO: max?
				let rCenterX : Real = r.x + r.width / 2 in
				Sequence {
					r.x.stay('MEDIUM'), r.y.stay('MEDIUM'),
					txt1.x.stay('MEDIUM'), txt1.y.stay('MEDIUM'),
					txt2.x.stay('MEDIUM'), txt2.y.stay('MEDIUM'),
					txt3.x.stay('MEDIUM'), txt3.y.stay('MEDIUM'),
	
					r.width = 0 -- strong
					,r.height = 0 -- strong
					,r.x >= 0, r.y >= 0,

--					r.x = txt.x,
--					r.centerX = txt.centerX,
					rCenterX = txtX + txtWidth / 2,
					r.y = txtY,

					txt2.y = txt1.y, txt3.y = txt2.y,
					txt2.x = txt1.x + txt1.width.toConstant(),
					txt3.x = txt2.x + txt2.width.toConstant(),

					r.width >= txtWidth + thisModule.MARGIN * 2,
					r.height >= txtHeight,

					l.startX = r.x, l.endX = r.x + r.width,
					l.startY = l.endY, l.startY = txtY + txtHeight
				}
		)
}

--helper context UML!ValueSpecification def: asString : String =
--	if self.oclIsKindOf(UML!LiteralInteger) then
--		self.oclAsType(UML!LiteralInteger).value.toString()
--	else
--		'<unsupported value: ' + self.name + '>'
--	endif;

--helper context UML!LiteralInteger def: asString : String =
--	self.value.toString();


-- How to proceed when an attribute is removed from a Class so that corresponding Slots get removed as well:
-- Simplified constraint:
--context Slot inv: self.owningInstance.classifier.allAttributes->includes(self.definingFeature)
--		-> cannot really be used for reparation (unless setting owningInstance to OclUndefined is ok) 
--context InstanceSpecification inv: self.slot->forAll(s | self.classifier.allSlottableFeatures->includes(s.definingFeature))
--context InstanceSpecification inv: self.slot->forAll(s | self.classifier.ownedAttribute->includes(s.definingFeature))
-- From the UML 2.5 spec, page 139 in InstanceSpecification:
-- 	defining_feature
-- The definingFeature of each slot is a StructuralFeature related to a classifier of the InstanceSpecification,
-- including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of
-- Associations, but excluding redefined StructuralFeatures.
--  inv: slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes
--  (s.definingFeature)))

unique lazy rule Slot {
	from
		s : UML!Slot
	to
		t : JFX!Figure (
			nodes <-
				-- TODO: why do we need oclAsType here?
				thisModule.ValueSpecification(s.value).txt.oclAsType(JFX!Text).concat(
					Sequence {
						txt1,
						txt2
					}
				).oclAsType(JFX!Node),
			constraints <- Sequence {constraints},
			children <- Sequence {}
		),
		txt1 : JFX!Text (
			text <- s.definingFeature.name,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			editable <- true,
			movable <- true
		),
		txt2 : JFX!Text (
			text <- ' = ',
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			movable <- true
		),
--		txt3 : JFX!Text (
--			text <- s.value.asString,
--			fill <- thisModule.transparentWhite,
--			stroke <- thisModule.opaqueBlack,
--			textOrigin <- #TOP,
--			movable <- true,
--			editable <- true
--		),
		constraints : Constraints!ExpressionGroup (
			solver <- 'cassowary',
			expressions <-
				let object : OclAny = thisModule.Object(s.owningInstance, s.owningInstance.classifier.oclAsType(UML!Class)) in
				let prev : OclAny = thisModule.Slot(s.prev) in
				let txt3 : OclAny = thisModule.ValueSpecification(s.value) in
				let txtX : Real = txt1.x in
				let txtWidth : Real = txt1.width.toConstant() + txt2.width.toConstant() + txt3.txt.width.toConstant() in
				let txtY : Real = txt1.y in
				let txtHeight : Real = txt1.height.toConstant() in	-- TODO: max?
				Sequence {
					txtX = object.r.x + thisModule.MARGIN,

					txtY >= object.l.startY,
					txtY >= prev.txt1.y + prev.txt1.height.toConstant(),

					txt2.y = txt1.y, txt3.txt.y = txt2.y,
					txt2.x = txt1.x + txt1.width.toConstant(),
					txt3.txt.x = txt2.x + txt2.width.toConstant(),

					object.r.width >= txtWidth + thisModule.MARGIN * 2,
					object.r.y + object.r.height >= txtY + txtHeight
				}
		)
}

unique lazy abstract rule ValueSpecification {
	from
		s : UML!ValueSpecification
	to
		txt : JFX!Text
}

unique lazy rule LiteralInteger extends ValueSpecification {
	from
		s : UML!LiteralInteger
	to
		txt : JFX!Text (
			text <- s.value.asString,
			fill <- thisModule.opaqueBlack,
			textOrigin <- #TOP,
			movable <- true,
			editable <- true
		)
}
