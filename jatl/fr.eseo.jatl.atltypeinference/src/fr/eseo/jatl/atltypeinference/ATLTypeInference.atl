-- @atlcompiler emftvm
-- ATL Type Inference by Frédéric Jouault
-- @nsURI ATL=http://www.eclipse.org/gmt/2005/OCL
-- should not be necessary here once we've moved all the UML-specific stuff out of this file
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
library ATLTypeInference;

uses ATLTypingHelpers;
uses ATLTypeInferenceToEcore;	-- e.g., -ToEcore, or -ToUML

-- This library defines:
--	- ATL!OclExpression.inferredType, which returns the inferred type of its source expression
--		- the type may be:
--			- a native type (e.g., UML-specific or Ecore specific, depending on which complementary lib is used)
--			- a Tuple(ttype:String,elementType:OclAny) for a collection type
-- This library requires a complementary platform-specific lib (e.g., for UML, or for Ecore), which should provide:
--		- ATL!OclModelElement.toPlatform
--		- String.primitiveType
--		- String.class

-- TODO:
--	- collection types (currently they are all collapsed to one type)
--	- EnumLiteralExp
--		- e.g., by using a tuple to keep the literal around and check it when possible
--			- when comparing
--			- when passing as parameter
--			- when storing
--	- MapExp

helper context OclAny def: inferredType : OclAny =
	-- assume OclAny when the type cannot be inferred?
--	thisModule.undefinedType;
	-- or propagate the fact that we have not been able to properly infer a type
	OclUndefined;

helper context ATL!OclExpression def: inferredType : OclAny =
	let t : String = self.oclType().debug('SHOWTYPE-').name.debug('error: ' + self.location + ': CANNOT infer type of') in
	OclUndefined;

helper context ATL!"OclType" def: inferredType : OclAny =
-- COMMENT OUT FOR ATL2010
	--OclType;
	Integer.oclType();

-- TODO: do something for this and OclAnyType?
helper context ATL!OclUndefinedExp def: inferredType : OclAny =
	thisModule.undefinedType;
--	ATL!OclUndefinedExp;
--	'String'.primitiveType;

helper context ATL!TupleExp def: inferredType : OclAny =
-- TODO: use a Tuple instead of creating model elements?
--	ATL!TupleType.newInstance().refSetValue('attributes', OrderedSet {
--		self.tuplePart->collect(e |
--			ATL!TupleTypeAttribute.newInstance()
--				.refSetValue('name', TODO)
--				.refSetValue('type', TODO)
--		)
--	});
	Tuple {
		ttype = 'Tuple',
		navigableProperties =	self.tuplePart->collect(e |
									let type : OclAny = e.initExpression.inferredType in
									Tuple {
										name = e.varName,
										type = if type.isCollection then type.asCollectionType.elementType else type endif,
										upper = if type.isCollection then -1 else 1 endif
									}
								)->asOrderedSet()
	};

--helper context ATL!"TupleType" def: ttype : String =
--	'Tuple';
-- TODO: improve this
helper context ATL!"TupleType" def: toPlatform : OclAny =
	let properties : OrderedSet(OclAny) =
		self.attributes->collect(e |
			let type : OclAny = e.type.toPlatform in
			Tuple {
				name = e.name,
				type = if type.isCollection then type.asCollectionType.elementType else type endif,
				upper = if type.isCollection then -1 else 1 endif
			}
		)->asOrderedSet()
	in
	Tuple {
		ttype = 'Tuple',
		navigableProperties = properties
		-- TODO: make sure all users of this library use navigableProperties instead
--		ownedAttribute = properties
	};

helper context OclAny def: navigableProperties : OrderedSet(TupleType(name:String,type:OclAny,upper:Integer)) =
	let msg : String = ('warning: cannot get navigableProperties of ' + self.toString()).debug() in
	OrderedSet {};

-- already done in toPlatform
--helper context ATL!"TupleType" def: navigableProperties : OrderedSet(OclAny) =
--	self.attributes->collect(e |
--		Tuple {
--			name = e.name,
--			type = e.type,
--			upper = if e.type.isCollection then -1 else 1 endif
--		}
--	)->asOrderedSet();

--helper context OclType def: navigableProperties : OrderedSet(OclAny) =
--	OrderedSet {'TODO'};

--helper context ATL!"TupleType" def: ownedAttribute : OrderedSet(OclAny) =
--	self.navigableProperties;

helper context OclAny def: isTuple : Boolean =
	if self.oclIsUndefined() or self = thisModule.undefinedType then
		false	
	else
		self.ttype = 'Tuple'
	endif;

helper context ATL!VariableExp def: inferredType : OclAny =
	let var : ATL!VariableDeclaration = self.referredVariable in
	if var.varName = 'self' then
		self.feature.class
	else if var.varName = 'thisModule' then
		let _ : String = 'warning: thisModule not supported by type inference'.debug() in
		OclUndefined
	else if var.oclIsKindOf(ATL!Iterator) then
		let it : ATL!Iterator = var.oclAsType(ATL!Iterator) in
		let sourceType : OclAny = it.loopExpr.sourceType in
		if sourceType.oclIsUndefined() or sourceType = thisModule.undefinedType then
			thisModule.undefinedType
		else
			let isZipWith : Boolean =
				if it.loopExpr.oclIsKindOf(ATL!IteratorExp) then
					it.loopExpr.oclAsType(ATL!IteratorExp).name = 'zipWith'
				else
					false
				endif
			in
			if isZipWith then
				let itExp : ATL!IteratorExp = it.loopExpr.oclAsType(ATL!IteratorExp) in
				if itExp.iterators->first() = it then
					sourceType.elementType.actualNavigableProperties->any(e |
						e.name = 'left'
					).type
				else
					sourceType.elementType.actualNavigableProperties->any(e |
						e.name = 'right'
					).type
				endif
			else
				sourceType.asCollectionType.elementType
			endif
		endif.debug('varExp-iterator@' + self.location + ' inferredType')
	else
		if var.shouldInfer then
			var.initExpression.inferredType
		else if var.refImmediateComposite().oclIsUndefined() then
			self.floatingVariableInferredType
		else
			var.type.toPlatform
		endif endif
	endif endif endif.debug('var-inferredType of ' + var.varName + '@' + self.location);

helper context ATL!LetExp def: inferredType : OclAny =
	self.in_.inferredType;

helper context ATL!IfExp def: inferredType : OclAny =
	let t : OclAny = self.thenExpression.inferredType.debug('ifExp-@' + self.location + ' thenType') in
	let e : OclAny = self.elseExpression.inferredType in
	if t.oclIsUndefined() or t = thisModule.undefinedType then
		e									-- TODO: lower = 0
	else
		t									-- TODO: common supertype
	endif;

helper context ATL!OclModelElement def: inferredType : OclAny =
	self.toPlatform.debug('-OclModelElement.toPlatform');

helper context ATL!IntegerExp def: inferredType : OclAny =
	'Integer'.primitiveType;

helper context ATL!RealExp def: inferredType : OclAny =
	'Double'.primitiveType;

helper context ATL!BooleanExp def: inferredType : OclAny =
	'Boolean'.primitiveType;

helper context ATL!StringExp def: inferredType : OclAny =
	'String'.primitiveType;

-- TODO: define ttype on ATL!OclType?
--helper context ATL!OclAnyType def: ttype : String =
--helper context ATL!"OclType" def: ttype : OclAny =
--	OclType;

helper context ATL!EnumLiteralExp def: inferredType : OclAny =
	Tuple {
		ttype = 'Enum',
		literals = Set {self.name}
	};

--helper context OclType def: ttype : OclAny =
--	self;

helper context OclAny def: ttype : OclAny =
	OclUndefined;

-- TODO: common supertype of all elements for elementType
helper context ATL!CollectionExp def: inferredType : OclAny =

	Tuple {ttype = 'Collection', elementType =
		let type : OclAny = self.elements->first().inferredType in
		if type.oclIsUndefined() then
			OclAny	-- we assume the most general type, but we could also propage OclUndefined to notify callers that we could not propely infer the type
		else
			type
		endif
	};

-- TODO: common supertype of all elements for keyType and valueType
helper context ATL!MapExp def: inferredType : OclAny =
	let first : ATL!MapElement = self.elements->first() in
	if first.oclIsUndefined() then
		Tuple {
			ttype = 'Map',
			keyType = thisModule.undefinedType,
			valueType = thisModule.undefinedType
		}
	else
		Tuple {
			ttype = 'Map',
			keyType = first.key.inferredType,
			valueType = first.value.inferredType
		}
	endif;

helper context ATL!IterateExp def: inferredType : OclAny =
	self.result.type.toPlatform;

helper context ATL!LoopExp def: sourceType : OclAny =
	if self.source.inferredType.isCollection then
		self.source.inferredType
	else
		Tuple {ttype = 'Collection', elementType = self.source.inferredType}
	endif;

-- TODO: try to represent iterator in OCLLibrary, using TP!* generics & encoded function types?
helper context ATL!IteratorExp def: inferredType : OclAny =
	if Set {'select', 'selectBy', 'reject', 'closure'}->includes(self.name) then
		self.sourceType
		-- TODO: check that closure body.inferredType.elementType == sourceType.elementType
	else if 'collect' = self.name then
		Tuple {ttype = 'Collection', elementType = self.body.inferredType}
	else if 'any' = self.name then
		self.sourceType.asCollectionType.elementType
	else if Set {'forAll', 'exists'}->includes(self.name) then
		'Boolean'.primitiveType
	else if self.name = 'zipWith' then
		-- TODO: check that sourceType.oclIsKindOf(Collection(TupleType(left,right)))
		--let props : INFER!TYPE = self.sourceType.debug('sourceType').elementType.navigableProperties in
		--let leftType : INFER!TYPE = props->any(e | e.name = 'left').debug('leftType') in
		--let rightType : INFER!TYPE = props->any(e | e.name = 'right').debug('rightType') in
		Tuple {ttype = 'Collection', elementType = self.body.inferredType}
	else
		let msg : String = ('warning: ' + self.location + ': unsupported iterator: ' + self.name).debug() in
		OclUndefined
	endif endif endif endif endif;

--helper context ATL!"TupleType" def: toPlatform : OclAny =
--	self;

helper context ATL!IntegerType def: toPlatform : OclAny =
	'Integer'.primitiveType;

helper context ATL!BooleanType def: toPlatform : OclAny =
	'Boolean'.primitiveType;

helper context ATL!RealType def: toPlatform : OclAny =
	'Double'.primitiveType;

helper context ATL!StringType def: toPlatform : OclAny =
	'String'.primitiveType;

helper context ATL!OclAnyType def: toPlatform : OclAny =
	thisModule.undefinedType;

-- TODO: find a proper representation
helper context ATL!"OclType" def: toPlatform : OclAny =
	OclAny;

helper def: undefinedType : OclAny =
	OclAny;
	--ATL!OclUndefinedExp;

helper context OclAny def: toPlatform : OclAny =
	thisModule.undefinedType;

helper context OclAny def: path : String =
	let parent : OclAny = self.refImmediateComposite() in
	if parent.oclIsUndefined() then
		''
	else
		parent.path
	endif +	'/' + self.oclAsType(Ecore!EObject).oclType().name;

helper context ATL!CollectionType def: toPlatform : OclAny =
	Tuple {ttype = 'Collection', elementType = self.elementType.toPlatform}.debug(
		'-' +
		self.path + '@' + self.location + '.toPlatform'
	);

helper context ATL!MapType def: toPlatform : OclAny =
	Tuple {
		ttype = 'Map',
		keyType = self.keyType.toPlatform,
		valueType = self.valueType.toPlatform
	}.debug('-' +
		self.path + '@' + self.location + '.toPlatform'
	);
	
helper context OclAny def: isCollection : Boolean =
	if self.oclIsUndefined() or self = thisModule.undefinedType then
		false	
	else
		self.ttype = 'Collection'
	endif;

--helper context OclAny def: baseName : String =
--	if self.ttype = 'Collection' then
--		if self.elementType.oclIsUndefined() or self.elementType = thisModule.undefinedType then
--			OclUndefined
--		else
--			self.elementType.baseName
--		endif
----	else if self.oclIsKindOf(UML!Type) then
----		self.name
--	else
--		OclUndefined
----	endif
--	endif;

helper context ATL!PropertyCallExp def: sourceType : OclAny =
	self.source.inferredType;

helper context ATL!CollectionOperationCallExp def: sourceType : OclAny =
	if self.source.inferredType.isCollection then
		self.source.inferredType
	else
		Tuple {ttype = 'Collection', elementType = self.source.inferredType}
	endif;

helper context ATL!PropertyCallExp def: isGlobal : Boolean =
	if self.source.oclIsKindOf(ATL!VariableExp) then
		self.source.oclAsType(ATL!VariableExp).referredVariable.varName = 'thisModule'
	else
		false
	endif;

-- or OclUndefined if not a type var
helper context ATL!"OclType" def: typeVarName : String =
	if self.oclIsKindOf(ATL!OclModelElement) then
		let ome : ATL!OclModelElement = self.oclAsType(ATL!OclModelElement) in
		if ome.model.name = 'TP' then
			ome.name
		else
			OclUndefined
		endif
	else
		OclUndefined
	endif.debug('unify-selfTypeVarName');

helper context OclAny def: asMapType : TupleType(keyType : OclAny, valueType : OclAny) =
	self.oclAsType(TupleType(keyType : OclAny, valueType : OclAny));

helper context OclAny def: asEnumType : TupleType(literals : Collection(String)) =
	self.oclAsType(TupleType(literals : Collection(String)));

helper context OclAny def: asCollectionType : TupleType(elementType : OclAny) =
	self.oclAsType(TupleType(elementType : OclAny));

-- union or OclUndefined if duplicate keys
--helper context Map(String, OclAny) def: checkedUnion(o : Map(String, OclAny)) : Map(String, OclAny) =
helper context Map(TP!K, TP!V) def: checkedUnion(o : Map(TP!K, TP!V)) : Map(TP!K, TP!V) =
	let s : INFER!TYPE = self in
-- Map context unsupported by regular ATL
-- Remark: the following signature also works with ATL2Java because of collisions between contexted & context-less helpers
--helper def: checkedUnion(s : Map(TP!K, TP!V), o : Map(TP!K, TP!V)) : Map(TP!K, TP!V) =
	--	self.union(o);
	o.getKeys()->iterate(e; acc : Map(TP!K, TP!V) = s |
		if acc.oclIsUndefined() then
			OclUndefined
		else if acc.containsKey(e) then
			if acc.get(e) = o.get(e) then	-- TODO: common superType? or use bounds
				acc
			else
				OclUndefined
			endif
		else
			acc.including(e, o.get(e))
		endif endif
	);

-- TODO: use a better unification algorithm
-- TODO: check instead of set when variable is repeated
-- returns OclUndefined if it cannot unify
helper context ATL!"OclType" def: unify(o : OclAny) : Map(String,OclAny) =
	let foo : String = (self.toString() + ' with ' + o.asTypeString).debug('unify-unifying') in
	if not self.typeVarName.oclIsUndefined() then
		Map {(self.typeVarName, o)}
	else if self.oclIsKindOf(ATL!CollectionType) and o.ttype = 'Collection' then
		self.oclAsType(ATL!CollectionType).elementType.unify(
			o.oclAsType(TupleType(elementType:OclAny)).elementType
		)
	else if self.oclIsKindOf(ATL!MapType) and o.ttype = 'Map' then
		self.oclAsType(ATL!MapType).keyType.unify(o.asMapType.keyType).checkedUnion(
			self.oclAsType(ATL!MapType).valueType.unify(o.asMapType.valueType)
		)
	else if self.oclIsKindOf(ATL!"TupleType") and o.ttype = 'Tuple' then
		let ret : Map(String,OclAny) = self.oclAsType(ATL!"TupleType").attributes->iterate(e; acc : Map(String, OclAny) = Map {} |
			if acc.oclIsUndefined() then
				OclUndefined
			else
				let oe : TupleType(name : String, type : OclAny) = o.navigableProperties.oclAsType(
					Collection(TupleType(name : String, type : OclAny))
				)->any(oe |
					oe.name = e.name
				) in
				if oe.oclIsUndefined() then
					OclUndefined
				else
					acc.checkedUnion(
						e.type.unify(oe.type)
					)
				endif
			endif
		) in
		if ret.oclIsUndefined() then
			OclUndefined
		else
			ret
		endif
--	else if self.oclIsKindOf(ATL!CollectionType) and o.oclIsKindOf(ATL!CollectionType) then
--		self.oclAsType(ATL!CollectionType).elementType.unify(o.oclAsType(ATL!CollectionType).elementType)
--	else if self.oclIsKindOf(ATL!OclAnyType) and o.oclIsKindOf(ATL!OclAnyType) then
--		Map {}
--	-- TODO: all type comparisons
	else if self.toPlatform.superOf(o) then
		Map {}
	else
		OclUndefined
--	endif
	endif endif endif endif endif
--		.oclAsType(Map(String,OclType))	-- seems unnecessary but COMMENT OUT FOR ATL 2010, which does not handle MapType as expression
	;

helper context ATL!"OclType" def: apply(values : Map(String,OclAny)) : OclAny =
	if values.oclIsUndefined() then
		self.toPlatform
	else if not self.typeVarName.oclIsUndefined() then
		let ret : OclAny = values.get(self.typeVarName) in
		if ret.oclIsUndefined() then
			OclAny.toPlatform
		else
			ret
		endif
	else if self.oclIsKindOf(ATL!CollectionType) then
		Tuple {
			ttype = 'Collection',
			elementType = self.oclAsType(ATL!CollectionType).elementType.apply(values).debug('apply-recursiveResult')
		}
	else if self.oclIsKindOf(ATL!"TupleType") then
		Tuple {
			ttype = 'Tuple',
			navigableProperties = 
				self.oclAsType(ATL!"TupleType").attributes->collect(e |
					let type : OclAny = e.type.apply(values) in
					Tuple {
						name = e.name,
						type = if type.isCollection then type.asCollectionType.elementType else type endif,
						upper = if type.isCollection then -1 else 1 endif
					}
				)->asOrderedSet()
			}	
	-- TODO: MapType
	else
		self.debug('apply-self').toPlatform.debug('apply-self.toPlatform')
	endif endif endif endif;

helper context String def: lazyRule : ATL!LazyMatchedRule =
	ATL!LazyMatchedRule.allInstancesFrom('IN')->any(r | r.name = self);

helper context String def: lazyRuleType : OclAny =
	if self.lazyRule.debug('call-rule for ' + self).oclIsUndefined() then
		OclUndefined
	else
		let extra : Map(String, OclAny) = self.lazyRule.extraRuleVariables in
		Tuple {
			ttype = 'Tuple',
			navigableProperties =	self.lazyRule.outPattern.elements->collect(e |
										let type : OclAny = e.type.toPlatform in
										Tuple {
											name = e.varName,
											type =	if type.oclIsUndefined() then
														thisModule.undefinedType
													else
														if type.isCollection then
															type.asCollectionType.elementType
														else
															type
														endif
													endif,
											upper = if type.isCollection then -1 else 1 endif
										}
									)->union(
										extra.getKeys()->collect(k |
											Tuple {
												name = k,
												type = extra.get(k),
												upper = 1
											}
										)
									)->asOrderedSet()
		}
	endif;

helper context ATL!OperationCallExp def: operation : OclAny =
	if self.isGlobal then
		let goh : ATL!Operation = self.operationName.globalOperationHelper in
		if goh.oclIsUndefined() then
			self.operationName.lazyRule
		else
			goh
		endif
	else
		let oh : ATL!Operation = self.operationHelper in
		if oh.oclIsUndefined() then
--			TODO: if not builtin, then
			self.platformSpecificOperation
		else
			oh
		endif
	endif;

helper context String def: globalOperationHelper : ATL!Operation =
	ATL!Operation.allInstancesFrom('IN')->any(a |
		a.contextType.debug('op-contextType').oclIsUndefined() and a.name = self
	).debug('call-global op');

helper context ATL!OperationCallExp def: operationHelper : ATL!Operation =
	let allOps : Collection(ATL!Operation) =	ATL!Operation.allInstancesFrom('IN')
		->union(
			ATL!Operation.allInstancesFrom('OCLLibrary')
		)
	in
	let ops : Collection(ATL!Operation) = allOps->select(op |
		-- TODO: find out why the body of this iterator is actually the forAl at line 463!!!
		if op.debug('op-OP').contextType.debug('op-contextType').oclIsUndefined() or self.sourceType.oclIsUndefined() then
			false
		else
			op.class
				.debug('op-class')
				.superOf(
					self.sourceType
				).debug('op-superOf')
		endif
	).debug('op-OPS0')->select(op |
		op.name = self.operationName
	).debug('op-OPS1')->select(op |
		self.arguments.size() = op.parameters->size()
	).debug('op-OPS2')->select(op |
		self.arguments->zip(op.parameters)->forAll(p |
			p.right.type.debug('op-paramOclType').toPlatform.debug('op-paramType').superOf(
				p.left.inferredType.debug('op-argType')
			)
		)
	).debug('op-OPS')
	in
	if ops->notEmpty() then
		-- TODO: error if more than one? or select most specific according to parameters too... because there can be overrides

		-- find Operation with most specific context
		ops->iterate(e; acc : ATL!Operation = OclUndefined |
			if acc.oclIsUndefined() then
				e
			else if acc.class.superOf(e.class) then
				e
			else
				acc
			endif endif
		).debug('op-OP')
	else
		OclUndefined
	endif;

helper context ATL!OperationCallExp def: inferredType : OclAny =
	let name : String = self.operationName.debug('op-opName@' + self.location) in
	if self.isGlobal.debug('call-isGlobal') then
		let op : ATL!Operation = name.globalOperationHelper in
		-- TODO: check args
		if op.oclIsUndefined() then
			name.lazyRuleType
		else
			op.returnType.toPlatform
		endif
	else
		let op : ATL!Operation = self.operationHelper in
		if not op.oclIsUndefined() then
			-- TODO: use unification for selecting the right operation, not just after selection
			let unified : Map(String, OclAny) =
				(let uc : INFER!TYPE = op.contextType.debug('opu-contextType').unify(
					self.sourceType.debug('opu-sourceType')
				).debug('opu-unified context') in
				if uc.oclIsUndefined() then
					OclUndefined
				else
					op.parameters->zip(
						self.arguments
					)->iterate(p; acc : Map(String,OclAny) = uc |
						let u : INFER!TYPE = p.left.type.unify(p.right.inferredType) in
						let r : INFER!TYPE =
							if u.oclIsUndefined() then
								OclUndefined
							else
								acc.checkedUnion(u)
							endif
						in
						if r.oclIsUndefined() then
							acc.debug('warning: could not unify ' + self.oclType().name + '@' + self.location + ', keeping current assignments')
						else
							r
						endif
					).debug('opu-unified context and args')
				endif)
--					.oclAsType(Map(String, OclAny))	-- COMMENT OUT FOR ATL2010... actually unnecessary if we type let variables in ATL2Java
			in
			op.returnType.apply(unified).debug('opu-applied@' + self.location)
		else if name = 'oclAsType' then
			self.arguments->first().toPlatform
		else if name = 'select' then
			let type : OclAny = self.arguments->first().toPlatform in
			-- not using self.sourceType, which is always a collection for CollectionOperationCallExps
			-- remark: this variant of select only exists in ATOL, neither in classical ATL nor in standard OCL
			if self.source.inferredType.isCollection then
				Tuple {
					ttype = 'Collection',
					elementType = type
				}
			else
				type
			endif
		else if name = 'collectTo' then
			-- TODO: wrap in collection if sourceType is a collection?
			self.arguments->first().oclAsType(ATL!StringExp).stringSymbol.lazyRuleType
		else if name = '__then' then
			self.arguments->first().inferredType
		else if name = '__block' then
			self.source.inferredType
		else if name = '__loop' then
			OclUndefined
		else if name = '__until' then
			OclUndefined
		else if name = 'refRemoveAt' then
			if self.arguments->size() = 1 then
				self.getSourcePropertyType(self.arguments->first().oclAsType(ATL!StringExp).stringSymbol)	-- CONSTRAINT: first arg must be stringSymbol
			else
				OclUndefined
			endif
		else if Set {'assertEquals', 'debug', 'refSetValue', 'refWriteValue'}->includes(name) then
			let test : String = if name = 'debug' and self.arguments->first().oclIsKindOf(ATL!StringExp) then
				if self.arguments->first().oclAsType(ATL!StringExp).stringSymbol = 'SHOWTYPE-' then
					self.sourceType.asTypeString.debug('SHOWING TYPE FOR ' + self.source.oclType().name + ' EXPRESSION AT ' + self.source.location)
				else
					''
				endif
			else
				''
			endif in
			self.sourceType
--		else if Set {'=', '<>', 'oclIsKindOf', 'oclIsTypeOf'}->includes(name) then
--			'Boolean'.primitiveType
		else if 'allInstances' = name or 'allInstancesFrom' = name then
			Tuple {ttype = 'Collection', elementType = self.source.toPlatform}
		else if 'newInstance' = name then
			self.source.toPlatform
	
		else
			self.platformSpecificInferredType
		endif endif endif endif endif endif endif endif endif endif endif endif
	endif;

helper context ATL!NavigationOrAttributeCallExp def: inferredType : OclAny =
	self.getSourcePropertyType(self.name);

helper context OclAny def: actualNavigableProperties : OrderedSet(OclAny) = --TupleType(name:String,type:OclAny,upper:Integer)) =
	let ret : INFER!TYPE  =
		if self.isTuple then
			self.navigableProperties
		else if self.oclIsKindOf(Ecore!EClass) then
			self.navigableProperties
		else
			OrderedSet {}
		endif endif.debug('nav-ret')
	in
	let attrs : Collection(ATL!Attribute) =	ATL!Attribute.allInstancesFrom('IN')
		->union(
			ATL!Attribute.allInstancesFrom('OCLLibrary')
		).debug('nav-attrs')
	in
	attrs
--	ATL!Attribute.allInstancesFrom('IN')
	--.oclAsType(Collection(ATL!Attribute))
	->select(a |
		if a.contextType.oclIsUndefined() then
			false
		else
			a.class.isAssignableFrom(self)
		endif
	)->collect(a |
		let type : OclAny = a.type.toPlatform in
		Tuple {
			name = a.name,
			type =	if type.isCollection then
						type.oclAsType(TupleType(elementType : OclAny)).elementType--.toPlatform
					else
						type
					endif,
			upper = if type.isCollection then -1 else 1 endif
		}
	)->union(ret)->asOrderedSet();

-- only for use by library users, not used internally
helper context ATL!NavigationOrAttributeCallExp def: property : OclAny =
	if self.isGlobal then
		ATL!Attribute.allInstancesFrom('IN')->any(a |
			a.contextType.oclIsUndefined() and a.name = self.name
		)
	else
		self.sourceType.actualNavigableProperties->any(e |
			e.name = self.name
		)
	endif;

helper context ATL!PropertyCallExp def: getSourcePropertyType(propertyName : String) : OclAny =
	if self.isGlobal.debug('propType-' + propertyName + '.isGlobal') then
		let attr : ATL!Attribute = ATL!Attribute.allInstancesFrom('IN')->any(a |
			a.contextType.oclIsUndefined() and a.name = propertyName
		).debug('propType-global attr') in
		if attr.oclIsUndefined() then
			OclUndefined
		else
			attr.type.toPlatform
		endif
	else if self.source.inferredType.debug('propType-sourceType').oclIsUndefined() then--or self.source.inferredType = thisModule.undefinedType then
		thisModule.undefinedType
	else
		let sourceType : OclAny =
			if self.source.inferredType.isCollection then
				-- this to support implicit collects
				-- TODO: what about helper attributes on collections?
				self.source.inferredType.asCollectionType.elementType
			else
				self.source.inferredType
			endif
		in
		let property : INFER!TYPE =
			sourceType.actualNavigableProperties->any(e |
				e.name = propertyName
			).debug('propType-FOUND property')
		in
		if property.oclIsUndefined() then
			let _ : String = ('warning: ' + self.location + ': could not find property "' + propertyName + '" on ' + sourceType.asTypeString).debug() in
			thisModule.undefinedType
		else if property.upper > 1 or property.upper < 0 then
			Tuple {ttype = 'Collection', elementType = property.type}
		else
			if self.source.inferredType.isCollection then
				Tuple {ttype = 'Collection', elementType = property.type}
			else
				property.type--.debug('type')
			endif
		endif endif
	endif endif.debug('propType-ret for ' + propertyName);

-- @begin Copied from Augment transformation
--helper context ATL!OclFeature def: transition : UML!Transition =
--	let ret : UML!Transition = UML!Transition.allInstancesFrom('IN')->any(t | t.name = self.type.name) in
--	if ret.oclIsUndefined() then
--		OclUndefined.debug('error: transition "' + self.type.name + '" not found')
--	else
--		ret
--	endif;
--
--helper context UML!Transition def: stateMachine : UML!StateMachine =
--	if self.container.stateMachine.oclIsUndefined() then
--		self.container.state.stateMachine
--	else
--		self.container.stateMachine
--	endif;

--helper context UML!State def: stateMachine : UML!StateMachine =
--	if self.container.stateMachine.oclIsUndefined() then
--		self.container.state.stateMachine
--	else
--		self.container.stateMachine
--	endif;

--helper context ATL!OclFeature def: state : UML!State =
--	let ret : UML!State = UML!State.allInstancesFrom('IN')->any(s | s.name = self.type.name) in
--	if ret.oclIsUndefined() then
--		OclUndefined.debug('error: state "' + self.type.name + '" not found')
--	else
--		ret
--	endif;

helper context ATL!OclFeature def: class : OclAny =
--	if self.name.startsWith('effect:') then
--		-- TODO: move this to UML-specific library & support hierarchical states
--		self.transition.stateMachine.owner
--	else if self.name.startsWith('entry:') then
--		-- TODO: move this to UML-specific library & support hierarchical states
--		self.state.stateMachine.owner
--	else if self.name.startsWith('guard:') then
--		-- TODO: move this to UML-specific library & support hierarchical states
--		self.transition.stateMachine.owner
--	else
		if self.contextType.debug('contextType-').oclIsUndefined() then
			OclUndefined
		else
			self.contextType.toPlatform.debug('contextType-toPlatform')
		endif;
--	endif endif endif;
-- @end Copied from Augment transformation

helper context OclAny def: origin : String =
	'';

-- BELOW THIS COMMENT: type checking that should ideally not be part of this lib

helper context OclAny def: asTypeString : String =
	if self.isTuple then
		'TupleType(' +
			self.navigableProperties->collect(e |
				e.name + ':' +
				if e.upper = 1 then
					e.type.asTypeString
				else
					'Collection(' + e.type.asTypeString + ')'
				endif
				+ ','
			)->prepend('')->sum() +
		')'
	else if self.isCollection then
		'Collection(' + self.asCollectionType.elementType.asTypeString + ')'
	else if self.oclIsKindOf(Ecore!EClassifier) then	-- TODO: move to platform-specific
		self.oclAsType(Ecore!EClassifier).ePackage.name + '!' + self.name
	else if self.oclIsUndefined() then
		'undefined'
	else
		self.toString()
	endif endif endif endif;

helper context OclAny def: superOf(sub : OclAny) : Boolean =
	if self.ttype = 'Tuple' and sub.ttype = 'Tuple' then
		self.navigableProperties->forAll(supP |
			sub.navigableProperties->exists(subP |
				if supP.name = subP.name then
					supP.type.superOf(subP.type)
				else
					false
				endif
			)
		)
	else if self.ttype = 'Map' and sub.ttype = 'Map' then
			self.asMapType.keyType.superOf(sub.asMapType.keyType)
		and
			self.asMapType.valueType.superOf(sub.asMapType.valueType)
	else if self.oclIsKindOf(Ecore!EEnum) and sub.ttype = 'Enum' then
		-- TODO: make ATLTypeInferenceToEcore not return Ecore-specific types
		let sup : INFER!TYPE = self.oclAsType(Ecore!EEnum) in
		sub.asEnumType.literals->forAll(sl |
			sup.eLiterals->exists(e | e.name = sl)
		)
	else
		self.debug('superOf-self').isAssignableFrom(sub.debug('superOf-sub')).debug('superOf-ret')
	endif endif endif;

helper context String def: assertActualSubExpected(expected : OclAny, actual : OclAny, featureName : String) : String =
	if actual.oclIsUndefined() then
		('expected: ' + expected.asTypeString + expected.origin).debug('warning: ' + self + ' ' + featureName + ' could not be typed')
--	else if actual <> expected then
	else if not expected.superOf(actual) then
		('expected: ' + expected.asTypeString + expected.origin + ', actual: ' + actual.asTypeString + ' from ' + actual.origin).debug('error: ' + self + ' inconsistent ' + featureName)
	else
		''
	endif endif;
	

-- only for properties
helper context OclAny def: actualType : OclAny =
	let prop : INFER!TYPE = self.oclAsType(TupleType(name:String,type:OclAny,upper:Integer)) in
	if prop.upper > 1 or prop.upper < 0 then
		Tuple {ttype = 'Collection', elementType = prop.type}
	else
		prop.type
	endif;

helper def: iteratorsWithPredicate : Set(String) =
	Set {'select', 'selectBy', 'reject', 'forAll', 'exists', 'any', 'one'};

--helper context OclAny def: isSubtypeOf(c : OclAny) : Boolean =
--	if self.oclIsUndefined() or c.oclIsUndefined() then
--		false
--	else if self.isCollection then
--		false
--	else if c.isCollection then
--		false
--	else if self.oclIsKindOf(SourceEcore!EClass) then	-- TODO: platform specific
--		c.eAllSuperTypes.debug()...
--	else
--		false
--	endif endif endif endif;
-- + ' ' + actual.isSubtypeOf(expected).toString()

-- TODO: check if actual is a subtype of expected
helper def: check : OclAny =
	Sequence {
		-- Operation helper return type
		ATL!Operation.allInstancesFrom('IN')->collect(e |
			let actual : OclAny = e.body.inferredType in
			let expected : OclAny = e.returnType.toPlatform in
			(
			 	if e.class.oclIsUndefined() then
					'<' + e.returnType.name + '>'
				else
					e.class.asTypeString
				endif + '.' + e.name + '@' + e.location).assertActualSubExpected(expected, actual, 'returnType')
		),
		-- Attribute helper type
		ATL!Attribute.allInstancesFrom('IN')->collect(e |
			let actual : OclAny = e.initExpression.inferredType in
			let expected : OclAny = e.type.toPlatform in
			(
			 	if e.class.oclIsUndefined() then
					'<' + e.type.name + '>'
				else
					e.class.name
				endif + '.' + e.name + '@' + e.location).assertActualSubExpected(expected, actual, 'type')
		),
		-- IteratorExps with predicate lambdas
		ATL!IteratorExp.allInstancesFrom('IN')->select(e |
			thisModule.iteratorsWithPredicate->includes(e.name)
		)->collect(e |
			let actual : OclAny = e.body.inferredType in
			let expected : OclAny = 'Boolean'.primitiveType in
			(e.name + '@' + e.location).assertActualSubExpected(expected, actual, 'body@'+ e.body.location)
		),
		-- IfExp.condition
		ATL!IfExp.allInstancesFrom('IN')->collect(e |
			let actual : OclAny = e.condition.inferredType in
			let expected : OclAny = 'Boolean'.primitiveType in
			('IfExp@' + e.location).assertActualSubExpected(expected, actual, 'condition')
		),
		-- LetExp
		ATL!LetExp.allInstancesFrom('IN')->select(e |
			not e.variable.shouldInfer
		)->collect(e |
			let actual : OclAny = e.variable.initExpression.inferredType in
			let expected : OclAny = e.variable.type.toPlatform in
			('LetExp@' + e.location).assertActualSubExpected(expected, actual, 'initExpression')
		),
		-- Binding value
		ATL!Binding.allInstancesFrom('IN')->collect(e |
			let ctxt : OclAny = e.debug('binding-Binding').outPatternElement.type.toPlatform in
			-- for messages:
			let typeName : String = e.outPatternElement.type.oclAsType(ATL!OclModelElement).model.name + '!' + e.outPatternElement.type.name in
			if ctxt.oclIsUndefined() then
				('warning: could not check Binding@' + e.location + ' because its contextual type (' + typeName + ') was not found').debug()
			else
				let actual : OclAny = e.value.inferredType in
				let prop : OclAny = ctxt.debug(
					'binding-outPatternElement'
				).navigableProperties.debug(
					'binding-outPatterElement properties'
				)->any(p |
					p.name = e.propertyName
				) in
				if prop.oclIsUndefined() then
					('warning: could not check Binding@' + e.location + ' because no property named ' + e.propertyName + ' was found in ' + typeName).debug()
				else
					let propType : INFER!Type = prop.actualType in
					let expected : INFER!Type =
						if propType.isCollection and not actual.isCollection then
							-- ATL allows this
							-- TODO: also do the opposite, for ATOL, which allows it as well?
							propType.asCollectionType.elementType
						else
							propType
						endif
					in
					if expected.oclIsUndefined() then
						('Binding@' + e.location + ' (' + e.propertyName + ') cannot convert type').debug()
					else
						('Binding@' + e.location).assertActualSubExpected(expected, actual, 'value')
					endif
				endif
			endif
		)
		-- force resolution of all operations to detect unfound ones
		,ATL!OperationCallExp.allInstancesFrom('IN')->collect(e |
			Tuple {call = e, hasType = not e.inferredType.oclIsUndefined(), notFound = e.operation.oclIsUndefined()}
--		)->collect(e |
--			if e.notFound then
				-- Remark: this message is redundant with the one displayed while type checking in platformSpecificInferredType (at least for ATLTypeInferenceToEcore)
				-- although the latter may not be always displayed (e.g., when the source type cannot not be inferred)
				-- Also, built-in operation are reported as not found
--				('warning: ' + e.call.location + ': could not find operation ' + e.call.operationName + ' in ' + e.call.source.inferredType.asTypeString).debug()
--			else
--				''
--			endif
		)
		-- check if all navigations have associated properties
		,ATL!NavigationOrAttributeCallExp.allInstancesFrom('IN')->collect(e |
			if e.property.oclIsUndefined() then
				-- Remark: this message is redundant with the one displayed while type checking in getSourcePropertyType
				-- although the latter is not displayed when the source type could not be inferred
				--('warning: ' + e.location + ': could not find property ' + e.name + ' in ' + e.source.inferredType.asTypeString).debug()
				''
			else
				''
			endif
		)
		,ATL!OclExpression.allInstancesFrom('IN')->reject(e |
			-- force resolution of root expression
			-- rationale: some non-root expressions are handled at a higher level (e.g., thisModule)
			-- so checking them would trigger normmally unreachable cases
			-- but some non-root expressions are not checked (e.g., non-first collection literal elements)
			e.refImmediateComposite().oclIsKindOf(ATL!OclExpression)
		)->collect(e | e.inferredType)
};
