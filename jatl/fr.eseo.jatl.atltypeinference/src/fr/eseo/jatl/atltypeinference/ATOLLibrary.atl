-- see OCLLibrary
library ATOLLibrary;

-- The return type should be based on the argument's value, which is not currently possible
-- This operation must therefore be hardcoded in ATLTypeInference
--helper context OclAny def: select(t : OclType) : OclAny =
--	'only for typing';
--helper context Collection(TP!E) def: select(t : OclType) : Collection(TP!E) =
--	'only for typing';


helper context TP!E def: asOne(default : OclAny) : TP!E =
	'only for typing';

helper context TP!E def: first() : TP!E =
	'only for typing';

helper context OclAny def: notEmpty() : Boolean =
	'only for typing';





-- Requires looking for a rule => must be hardcoded in ATLTypeInference
--helper context OclAny def: collectTo(ruleName : String) : OclAny =
--	'only for typing';
--helper context Collection(OclAny) def: collectTo(ruleName : String) : Collection(OclAny) =
--	'only for typing';

helper context Collection(TP!E) def: __immutable() : Collection(TP!E) =
	'only for typing';

-- TODO: improve signature
--helper context TP!E def: concat(o : TP!E) : Collection(TP!E) =
		-- problems with the above signature:
				-- no matching in unify yet
				-- because ATOL has implicit navigation, returning a Collection would need more support from ATLTypeInference
helper context TP!E def: concat(o : OclAny) : TP!E =
	'only for typing';

-- TODO: common supertype
helper context Collection(TP!L) def: zip(o : Collection(TP!R)) : Collection(TupleType(left:TP!L, right:TP!R)) =
	'only for typing';

-- ATLC
helper context Real def: toConstant() : Real =
	'only for typing';

helper context Real def: stay(strength : String) : Real =
	'only for typing';

helper context Real def: stay(strength : String, weight : Integer) : Real =
	'only for typing';




-- Lifted operrations (TODO: handle lifting automatically in ATLTypeInference?)
-- Collection(Integer) operations
helper context Collection(Integer) def: "-"() : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "-"(o : Integer) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "-"(o : Collection(Integer)) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "+"(o : Integer) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "+"(o : Collection(Integer)) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "*"(o : Integer) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: "*"(o : Collection(Integer)) : Collection(Integer) =
	'only for typing';

helper context Collection(Integer) def: ">="(o : Integer) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: ">="(o : Collection(Integer)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: ">"(o : Integer) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: ">"(o : Collection(Integer)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: "<="(o : Integer) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: "<="(o : Collection(Integer)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: "<"(o : Integer) : Collection(Boolean) =
	'only for typing';

helper context Collection(Integer) def: "<"(o : Collection(Integer)) : Collection(Boolean) =
	'only for typing';


helper context Collection(Integer) def: "*"(o : Real) : Collection(Real) =
	'only for typing';

helper context Collection(Integer) def: "*"(o : Collection(Real)) : Collection(Real) =
	'only for typing';


-- Collection(Real) operations
helper context Collection(Real) def: "-"() : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "-"(o : Collection(Real)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "-"(o : Real) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "+"(o : Real) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "+"(o : Collection(Real)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "*"(o : Real) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "*"(o : Collection(Real)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: ">="(o : Real) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: ">="(o : Collection(Real)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: ">"(o : Real) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: ">"(o : Collection(Real)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: "<="(o : Real) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: "<="(o : Collection(Real)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: "<"(o : Real) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def: "<"(o : Collection(Real)) : Collection(Boolean) =
	'only for typing';

helper context Collection(Real) def:atan2(o : Collection(Real)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def:atan2(o : Real) : Collection(Real) =
	'only for typing';


helper context Collection(Real) def: "-"(o : Integer) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "-"(o : Collection(Integer)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "+"(o : Integer) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "+"(o : Collection(Integer)) : Collection(Real) =
	'only for typing';

helper context Collection(Real) def: "/"(o : Collection(Integer)) : Collection(Collection(Real)) =
	'only for typing';

helper context Collection(Real) def: "/"(o : Integer) : Collection(Collection(Real)) =
	'only for typing';
