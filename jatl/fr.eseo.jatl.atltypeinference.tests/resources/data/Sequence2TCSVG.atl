-----------------------------------------------------------------
--  Copyright (C) 2020 ESEO, Université d'Angers 
--
--  This program and the accompanying materials are made
--  available under the terms of the Eclipse Public License 2.0
--  which is available at https://www.eclipse.org/legal/epl-2.0/
--
--  Contributors:
--    - Frédéric Jouault
--    - Théo Le Calvar
--
--  SPDX-License-Identifier: EPL-2.0
------------------------------------------------------------------

module Sequence2TCSVG;

create OUT: SVG, constraints : Constraints from IN: Seq;
-- not just SVG, but geometric constraints as well (e.g., Rectangle.top)

-- should not be needed
-- all unique lazy rules should be compiled to <def>
--unique lazy rule Root {
--	from
--		s: Seq!ChangeMe,
--		origin: String,
--		scale: Real,
--		hideLinks: Boolean,
--		styleMode: Boolean
--	
--	to
--		t : SVG!SVG (
--			children <- Sequence {
--				thisModule.ArrowHead(),
--				thisModule.HorizontalWhiteStripes(),
--				thisModule.Object(),
--				thisModule.Actor(),
--				thisModule.Call(),
--				thisModule.Accept(),
--				thisModule.Direct(),
--				thisModule.SelfAccept(),
--				thisModule.Unaccpted(),
--				thisModule.Found(),
--				thisModule.Set(),
--				thisModule.After(),
--				thisModule.Note(),
--				thisModule.Invariant(),
--				thisModule.Fragment(),
--				thisModule.Compartment(scale),
--				thisModule.TextCompartment(),
--				thisModule.ActualGate()
--			}
--		)
--}


-- this is not really part of the transformation
-- should it be defined elsewhere ?
-- it is more like a common graphical elements that could be provided by a library
--unique lazy rule ArrowHead {
--	from
--		s: Seq!Foo -- input is useless here
--	to
--		t: SVG!Marker (
--			id <- 'arrowHead',
--			markerWidth <- 10,
--			markerHeight <- 8,
--			refX <- 4,
--			refY <- 4,
--			orient <- 'auto',
--			children <- Sequence {p}
--		),
--		p: SVG!Polygon (
--			class <- 'messageArrowHead',
--			points <- Sequence {0,0,10,4,0,8,6,4}
--		)
--	
--}

-- which would be better ?
-- ATL parser does not like the second syntax
--helper def : Marker : SVG!Marker = 
--	let p : SVG!Polygon = SVG!Polygon {
--			class=- 'messageArrowHead',
--			points=- Sequence {0,0,10,4,0,8,6,4}
--		}
--	in SVG!Marker {
--			id <- 'arrowHead',
--			markerWidth <- 10,
--			markerHeight <- 8,
--			refX <- 4,
--			refY <- 4,
--			orient <- 'auto',
--			children <- Sequence {p}
--	}


-- unique lazy rule Objectv1 {
-- 	from
-- 		s: Seq!Object
-- 	to
-- 		t: SVG!Group (
-- 			id <- 'object',
-- 			children <- Sequence {l1, outline, n1, l2, outline2, n2 }
-- 		),
-- 		l1: SVG!Line (
-- 			id <- '.line',
-- 			class <- 'lifeline',
-- 			stroke <- 'black'
-- 		),
-- 		outline: SVG!Rectangle (
-- 			id <- '.outline',
-- 			fill <- 'none',
-- 			class <- 'participant',
-- 			stroke <- s.color
-- 		),
-- 		n1: SVG!Text (
-- 			id <- '.name',
-- 			class <- 'participantName',
-- 			content_value <- s.name
-- 		),
-- 		l2: SVG!Line (
-- 			id <- '.line2',
-- 			class <- 'lifeline',
-- 			stroke <- 'black'
-- 		),
-- 		outline2: SVG!Rectangle (
-- 			id <- '.outline2',
-- 			fill <- 'none',
-- 			class <- 'participant',
-- 			stroke <- s.color
-- 		),
-- 		n2: SVG!Text (
-- 			id <- '.name2',
-- 			class <- 'participantName',
-- 			content_value <- s.name
-- 		),
-- 		__constraints: Constraints!ExpressionGroup (
-- 			expressions <- Sequence {
-- 				thisModule.participantConstraints(s)
-- 			}
-- 		)
-- }

unique lazy abstract rule Participant {
	from
		s : Seq!Participant
	to
		t : SVG!Group
}

unique lazy rule Objectv2 extends Participant {
	from
		s: Seq!Object
	to
		t: SVG!Group ( -- id derived from source object type
			content <- '
				<line class="lifeline" id=".line"/>

				<rect class="participant" id=".outline"/>
				<text class="participantName" id=".name">${s.name}</text>

				<line class="lifeline" id=".line2"/>

				<rect class="participant" id=".outline2"/>
				<text class="participantName" id=".name2">${s.name}</text>
			'
		),
		__constraints: Constraints!ExpressionGroup (
			expressions <- Sequence {
				thisModule.participantConstraints(t)
			}
		)
}

helper def: HEAD_R : Integer = 8;
helper def: BODY_LENGTH : Integer = 27;
helper def: ARM_LENGTH : Integer = 26;
helper def: HEAD2ARMS : Integer = 8;

--helper context SVG!Foo def: LEG_HEIGHT : Integer = 15;

helper def: LEG_HEIGHT2() : Integer = 15;

helper def: INTER_OBJECT_MARGIN: Integer = 5;
helper def: MARGIN: Integer = 5;

helper def: Foo(x : Integer, y : Real) : Real = if -x < 15 then 0.1 else x * 1.0 endif;

helper def: DeuxPiPlusQuatre : Real =
	let PI : Real = 3.14
	in 2 * PI + 4;

--helper context SVG!Foo def: Bar() : Boolean = if self.LEG_HEIGHT < 23 then true else thisModule.MARGIN endif;

-- @constraints
helper def: textOutline(outline: SVG!Rectangle, name: SVG!Text) : Boolean =
		outline.width >= name.width + thisModule.MARGIN * 2
	and	outline.height >= name.height + thisModule.MARGIN * 2
	and name.center = outline.center;

-- @constraints
helper def: participantConstraints(part : Seq!Participant) : Boolean =
	let tgt : INFER!TYPE =
		thisModule.Participant(part).oclAsType(	-- TODO: make it so we do not need this anymore
			TupleType(
				name : SVG!Text,
				line : SVG!Line,
				outline : SVG!Rectangle,
				name2 : SVG!Text,
				line2 : SVG!Line,
				outline2 : SVG!Rectangle
			)
		)
	in
	let afterTgt : INFER!TYPE =
		thisModule.Participant(part.after).oclAsType(
			TupleType(line : SVG!Line, outline : SVG!Rectangle)
		)
	in
	not part.x.oclIsUndefined() implies (
			tgt.outline.x = part.x
		and tgt.outline.y = part.y
	)
	and not part.after.oclIsUndefined() implies (
			tgt.outline.bottom.p1.y = afterTgt.outline.bottom.p1.y
		and tgt.outline.center.x >= afterTgt.outline.center.x + tgt.outline.width + afterTgt.outline.width / 2 + thisModule.INTER_OBJECT_MARGIN 
		and tgt.line.p2.y = afterTgt.line.p2.y
	)
	and tgt.line.p1 = tgt.outline.bottom.center
	and tgt.line.p2.x = tgt.line.p1.x
	and tgt.line.p2.y >= tgt.line.p1.y + 20
	and thisModule.textOutline(tgt.outline, tgt.name)
	and thisModule.textOutline(tgt.outline2, tgt.name2)
	and tgt.line2.p1 = tgt.line.p2
	and tgt.line2.p2 = tgt.line2.p1.dy(40)
	and tgt.line2.p2 = tgt.outline2.top.center;


unique lazy rule Actor extends Participant {
	from
		s: Seq!Actor
	to
		t: SVG!Group (
			class <- 'actor',
			content <- '
				<line class="lifeline" id="line"/>

				<rect id="outline" display="none"/>
				<text class="participantName" id="name">${s.name}</text>
				<circle id="head" stroke="${s.color}" />
				<line id="body"/>
				<line id="arms"/>
				<line id="leftLeg"/>
				<line id="rightLeg"/>

				<line class="lifeline" id="line2" />

				<rect id="outline2" fill="none" display="none"/>
				<text class="participantName" id="name2">${s.name}</text>
				<circle id="head2"/>
				<line id="body2"/>
				<line id="arms2"/>
				<line id="leftLeg2"/>
				<line id="rightLeg2"/>
			'
		),
		__constraints__: Constraints!ExpressionGroup (
			expressions <- Sequence {
				thisModule.participantConstraints(t),
				
				thisModule.actor(head, body, arms, leftLeg, rightLeg),
				outline.top.center = body.p2.dy(thisModule.LEG_HEIGHT),
				
				thisModule.actor(head2, body2, arms2, leftLeg2, rightLeg2),
				outline2.bottom.center = head2.center.dy(-thisModule.HEAD_R)
			}
		)
}